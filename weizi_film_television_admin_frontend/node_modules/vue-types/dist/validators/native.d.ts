import { PropOptions } from '../types';
export declare const any: <T = any>() => import("../types").VueTypeValidableDef<T, import("../types").ValidatorFunction<T>>;
export declare const func: <T extends (...args: any[]) => any>() => import("../types").VueTypeValidableDef<T, import("../types").ValidatorFunction<T>>;
export declare const bool: () => import("../types").VueTypeValidableDef<boolean, import("../types").ValidatorFunction<boolean>>;
export declare const string: <T extends string = string>() => import("../types").VueTypeValidableDef<T, import("../types").ValidatorFunction<T>>;
export declare const number: <T extends number = number>() => import("../types").VueTypeValidableDef<T, import("../types").ValidatorFunction<T>>;
export declare const array: <T>() => import("../types").VueTypeValidableDef<T[], import("../types").ValidatorFunction<T[]>>;
export declare const object: <T extends Record<string, any>>() => import("../types").VueTypeValidableDef<T, import("../types").ValidatorFunction<T>>;
export declare const integer: <T extends number = number>() => import("../types").VueTypeDef<T>;
export declare const symbol: () => import("../types").VueTypeDef<symbol>;
export declare const nullable: () => PropOptions<null, null>;
