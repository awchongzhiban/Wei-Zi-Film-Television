'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var elementPlus = require('element-plus');
var index$1 = require('../../display-item/index.js');
var index = require('../../utils/index.js');
var is = require('../../utils/is.js');

var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusDescriptions"
  },
  __name: "index",
  props: {
    data: { type: null, required: true, default: () => ({}) },
    columns: { type: Array, required: false, default: () => [] },
    column: { type: Number, required: false, default: 3 },
    title: { type: String, required: false, default: "" }
  },
  setup(__props) {
    const props = __props;
    const subColumns = vue.computed(
      () => props.columns.filter((item) => vue.unref(item.hideInDescriptions) !== true)
    );
    const getDisplayValue = (prop) => index.getValue(props.data, prop);
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElDescriptions), vue.mergeProps({
        title: _ctx.title,
        column: _ctx.column,
        class: "plus-description",
        border: ""
      }, _ctx.$attrs), {
        title: vue.withCtx(() => [
          vue.renderSlot(_ctx.$slots, "title")
        ]),
        extra: vue.withCtx(() => [
          vue.renderSlot(_ctx.$slots, "extra")
        ]),
        default: vue.withCtx(() => [
          vue.renderSlot(_ctx.$slots, "default", {}, () => [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList(subColumns.value, (item) => {
                var _a, _b;
                return vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElDescriptionsItem), vue.mergeProps({
                  key: item.label,
                  label: item.label,
                  "class-name": (((_a = item.descriptionsItemProps) == null ? void 0 : _a.className) || "") + " plus-description__name",
                  "label-class-name": (((_b = item.descriptionsItemProps) == null ? void 0 : _b.labelClassName) || "") + " plus-description__label"
                }, item.descriptionsItemProps), {
                  label: vue.withCtx(() => [
                    item.renderDescriptionsLabel && vue.unref(is.isFunction)(item.renderDescriptionsLabel) ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(item.renderDescriptionsLabel), {
                      key: 0,
                      label: item.label,
                      column: item,
                      row: _ctx.data
                    }, null, 8, ["label", "column", "row"])) : _ctx.$slots[vue.unref(index.getDescLabelSlotName)(item.prop)] ? (vue.openBlock(), vue.createElementBlock(
                      vue.Fragment,
                      { key: 1 },
                      [
                        vue.createCommentVNode(" plus-desc-label-* "),
                        vue.renderSlot(_ctx.$slots, vue.unref(index.getDescLabelSlotName)(item.prop), {
                          column: item,
                          row: _ctx.data,
                          label: item.label
                        })
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : (vue.openBlock(), vue.createElementBlock(
                      vue.Fragment,
                      { key: 2 },
                      [
                        vue.createCommentVNode(" normal "),
                        vue.createTextVNode(
                          vue.toDisplayString(item.label),
                          1
                          /* TEXT */
                        )
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    ))
                  ]),
                  default: vue.withCtx(() => [
                    item.renderDescriptionsItem && vue.unref(is.isFunction)(item.renderDescriptionsItem) ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(item.renderDescriptionsItem), {
                      key: 0,
                      value: getDisplayValue(item.prop),
                      column: item,
                      row: _ctx.data
                    }, null, 8, ["value", "column", "row"])) : _ctx.$slots[vue.unref(index.getDescSlotName)(item.prop)] ? (vue.openBlock(), vue.createElementBlock(
                      vue.Fragment,
                      { key: 1 },
                      [
                        vue.createCommentVNode(" plus-desc-* "),
                        vue.renderSlot(_ctx.$slots, vue.unref(index.getDescSlotName)(item.prop), {
                          column: item,
                          row: _ctx.data,
                          value: getDisplayValue(item.prop)
                        })
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : (vue.openBlock(), vue.createElementBlock(
                      vue.Fragment,
                      { key: 2 },
                      [
                        vue.createCommentVNode(" normal "),
                        vue.createVNode(vue.unref(index$1.PlusDisplayItem), {
                          column: item,
                          row: _ctx.data
                        }, null, 8, ["column", "row"])
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    ))
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1040, ["label", "class-name", "label-class-name"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ]),
        _: 3
        /* FORWARDED */
      }, 16, ["title", "column"]);
    };
  }
});

exports.default = _sfc_main;
