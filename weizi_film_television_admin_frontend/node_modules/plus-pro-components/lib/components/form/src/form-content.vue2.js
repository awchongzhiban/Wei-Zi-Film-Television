'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var elementPlus = require('element-plus');
var index = require('../../form-item/index.js');
var index$1 = require('../../utils/index.js');
var is = require('../../utils/is.js');

const _hoisted_1 = {
  key: 0,
  class: "plus-form-item-extra"
};
var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusFormContent"
  },
  __name: "form-content",
  props: {
    modelValue: { type: null, required: false, default: () => ({}) },
    hasLabel: { type: Boolean, required: false, default: true },
    columns: { type: Array, required: false, default: () => [] },
    rowProps: { type: Object, required: false, default: () => ({}) },
    colProps: { type: Object, required: false, default: () => ({}) }
  },
  emits: ["update:modelValue", "change"],
  setup(__props, { emit }) {
    const props = __props;
    const state = vue.reactive({ values: {} });
    const getHasLabel = (hasLabel) => {
      const has = vue.unref(hasLabel);
      if (typeof has === "boolean") {
        return has;
      }
      return props.hasLabel;
    };
    vue.watch(
      () => props.modelValue,
      (val) => {
        state.values = val;
      },
      {
        immediate: true
      }
    );
    const handleChange = (value, column) => {
      emit("change", state.values, column);
      emit("update:modelValue", state.values);
    };
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createBlock(
        vue.unref(elementPlus.ElRow),
        vue.normalizeProps(vue.guardReactiveProps(_ctx.rowProps)),
        {
          default: vue.withCtx(() => [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList(_ctx.columns, (item) => {
                return vue.openBlock(), vue.createBlock(
                  vue.unref(elementPlus.ElCol),
                  vue.mergeProps({
                    key: item.prop
                  }, item.colProps || _ctx.colProps),
                  {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(index.PlusFormItem), vue.mergeProps({
                        modelValue: state.values[item.prop],
                        "onUpdate:modelValue": ($event) => state.values[item.prop] = $event
                      }, item, {
                        "has-label": getHasLabel(item.hasLabel),
                        "label-width": getHasLabel(item.hasLabel) ? item.labelWidth : "0px",
                        onChange: (value) => handleChange(value, item)
                      }), vue.createSlots({
                        _: 2
                        /* DYNAMIC */
                      }, [
                        _ctx.$slots[vue.unref(index$1.getLabelSlotName)(item.prop)] ? {
                          name: vue.unref(index$1.getLabelSlotName)(item.prop),
                          fn: vue.withCtx((data) => [
                            vue.renderSlot(_ctx.$slots, vue.unref(index$1.getLabelSlotName)(item.prop), vue.normalizeProps(vue.guardReactiveProps(data)))
                          ]),
                          key: "0"
                        } : void 0,
                        _ctx.$slots[vue.unref(index$1.getFieldSlotName)(item.prop)] ? {
                          name: vue.unref(index$1.getFieldSlotName)(item.prop),
                          fn: vue.withCtx((data) => [
                            vue.renderSlot(_ctx.$slots, vue.unref(index$1.getFieldSlotName)(item.prop), vue.normalizeProps(vue.guardReactiveProps(data)))
                          ]),
                          key: "1"
                        } : void 0
                      ]), 1040, ["modelValue", "onUpdate:modelValue", "has-label", "label-width", "onChange"]),
                      vue.createCommentVNode(" el-form-item \u4E0B\u4E00\u884C\u989D\u5916\u7684\u5185\u5BB9 "),
                      item.renderExtra || _ctx.$slots[vue.unref(index$1.getExtraSlotName)(item.prop)] ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1, [
                        item.renderExtra && vue.unref(is.isFunction)(item.renderExtra) ? (vue.openBlock(), vue.createBlock(
                          vue.resolveDynamicComponent(item.renderExtra),
                          vue.normalizeProps(vue.mergeProps({ key: 0 }, item)),
                          null,
                          16
                          /* FULL_PROPS */
                        )) : _ctx.$slots[vue.unref(index$1.getExtraSlotName)(item.prop)] ? vue.renderSlot(_ctx.$slots, vue.unref(index$1.getExtraSlotName)(item.prop), vue.normalizeProps(vue.mergeProps({ key: 1 }, item))) : vue.createCommentVNode("v-if", true)
                      ])) : vue.createCommentVNode("v-if", true)
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1040
                  /* FULL_PROPS, DYNAMIC_SLOTS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            )),
            vue.createCommentVNode(" \u641C\u7D22\u7684footer\u63D2\u69FD  "),
            _ctx.$slots["search-footer"] ? (vue.openBlock(), vue.createBlock(
              vue.unref(elementPlus.ElCol),
              vue.normalizeProps(vue.mergeProps({ key: 0 }, _ctx.colProps)),
              {
                default: vue.withCtx(() => [
                  vue.renderSlot(_ctx.$slots, "search-footer")
                ]),
                _: 3
                /* FORWARDED */
              },
              16
              /* FULL_PROPS */
            )) : vue.createCommentVNode("v-if", true)
          ]),
          _: 3
          /* FORWARDED */
        },
        16
        /* FULL_PROPS */
      );
    };
  }
});

exports.default = _sfc_main;
