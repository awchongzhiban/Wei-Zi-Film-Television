'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var elementPlus = require('element-plus');
require('../../../hooks/index.js');
var index = require('../../utils/index.js');
var formContent = require('./form-content.vue.js');
var useLocale = require('../../../hooks/useLocale.js');

const _hoisted_1 = { class: "plus-form__group__item__icon" };
var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusForm"
  },
  __name: "index",
  props: {
    modelValue: { type: null, required: false, default: () => ({}) },
    defaultValues: { type: null, required: false, default: () => ({}) },
    columns: { type: Array, required: false, default: () => [] },
    labelWidth: { type: String, required: false, default: "80px" },
    labelPosition: { type: String, required: false, default: "left" },
    rowProps: { type: Object, required: false, default: () => ({}) },
    colProps: { type: Object, required: false, default: () => ({}) },
    labelSuffix: { type: String, required: false, default: ":" },
    hasErrorTip: { type: Boolean, required: false, default: true },
    hasFooter: { type: Boolean, required: false, default: true },
    hasReset: { type: Boolean, required: false, default: true },
    hasLabel: { type: Boolean, required: false, default: true },
    submitText: { type: String, required: false, default: "" },
    resetText: { type: String, required: false, default: "" },
    submitLoading: { type: Boolean, required: false, default: false },
    footerAlign: { type: String, required: false, default: "left" },
    rules: { type: null, required: false, default: () => ({}) },
    group: { type: [Boolean, Array], required: false, default: false }
  },
  emits: ["update:modelValue", "submit", "change", "reset", "submitError"],
  setup(__props, { expose: __expose, emit }) {
    const props = __props;
    const { t } = useLocale.useLocale();
    const formInstance = vue.ref();
    const state = vue.reactive({
      values: { ...props.modelValue },
      subColumns: []
    });
    const filterHide = (columns) => {
      return columns.filter((item) => vue.unref(item.hideInForm) !== true);
    };
    const model = vue.computed(() => state.values);
    const style = vue.computed(() => ({
      justifyContent: props.footerAlign === "left" ? "flex-start" : props.footerAlign === "center" ? "center" : "flex-end"
    }));
    state.subColumns = vue.computed(() => filterHide(props.columns));
    const slots = vue.useSlots();
    const labelSlots = index.filterSlots(slots, index.getLabelSlotName());
    const fieldSlots = index.filterSlots(slots, index.getFieldSlotName());
    const extraSlots = index.filterSlots(slots, index.getExtraSlotName());
    vue.watch(
      () => props.modelValue,
      (val) => {
        state.values = val;
      },
      {
        immediate: true
      }
    );
    const handleChange = (_, column) => {
      emit("change", state.values, column);
      emit("update:modelValue", state.values);
    };
    const clearValidate = () => {
      var _a;
      (_a = formInstance.value) == null ? void 0 : _a.clearValidate();
    };
    const handleSubmit = async () => {
      var _a, _b, _c;
      try {
        const valid = await ((_a = formInstance.value) == null ? void 0 : _a.validate());
        if (valid) {
          emit("submit", state.values);
          return true;
        }
      } catch (errors) {
        if (props.hasErrorTip) {
          elementPlus.ElMessage.closeAll();
          const values = Object.values(errors);
          elementPlus.ElMessage.warning(((_c = (_b = values[0]) == null ? void 0 : _b[0]) == null ? void 0 : _c.message) || t("plus.form.errorTip"));
        }
        emit("submitError", errors);
      }
      return false;
    };
    const handleReset = () => {
      clearValidate();
      state.values = { ...props.defaultValues };
      emit("update:modelValue", state.values);
      emit("reset", state.values);
    };
    __expose({
      formInstance,
      handleSubmit,
      handleReset
    });
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElForm), vue.mergeProps({
        ref_key: "formInstance",
        ref: formInstance,
        rules: _ctx.rules,
        "label-width": _ctx.hasLabel ? _ctx.labelWidth : 0,
        class: ["plus-form", _ctx.hasLabel ? "" : "no-has-label"],
        "label-position": _ctx.labelPosition,
        "validate-on-rule-change": false,
        "label-suffix": _ctx.hasLabel ? _ctx.labelSuffix : ""
      }, _ctx.$attrs, { model: model.value }), {
        default: vue.withCtx(() => [
          vue.renderSlot(_ctx.$slots, "default", {}, () => [
            vue.createCommentVNode(" \u5206\u7EC4\u8868\u5355 "),
            _ctx.group ? (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              { key: 0 },
              vue.renderList(_ctx.group, (groupItem) => {
                return vue.openBlock(), vue.createBlock(
                  vue.unref(elementPlus.ElCard),
                  {
                    key: groupItem.title,
                    class: "plus-form__group__item"
                  },
                  {
                    header: vue.withCtx(() => [
                      vue.renderSlot(_ctx.$slots, "group-header", {
                        title: groupItem.title,
                        columns: groupItem.columns,
                        icon: groupItem.icon
                      }, () => [
                        vue.createElementVNode("div", _hoisted_1, [
                          groupItem.icon ? (vue.openBlock(), vue.createBlock(
                            vue.unref(elementPlus.ElIcon),
                            { key: 0 },
                            {
                              default: vue.withCtx(() => [
                                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(groupItem.icon)))
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          )) : vue.createCommentVNode("v-if", true),
                          vue.createTextVNode(
                            " " + vue.toDisplayString(groupItem.title),
                            1
                            /* TEXT */
                          )
                        ])
                      ])
                    ]),
                    default: vue.withCtx(() => [
                      vue.createVNode(formContent.default, {
                        modelValue: state.values,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => state.values = $event),
                        "row-props": _ctx.rowProps,
                        "col-props": _ctx.colProps,
                        columns: filterHide(groupItem.columns),
                        onChange: handleChange
                      }, vue.createSlots({
                        _: 2
                        /* DYNAMIC */
                      }, [
                        vue.renderList(vue.unref(labelSlots), (_, key) => {
                          return {
                            name: key,
                            fn: vue.withCtx((data) => [
                              vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
                            ])
                          };
                        }),
                        vue.renderList(vue.unref(fieldSlots), (_, key) => {
                          return {
                            name: key,
                            fn: vue.withCtx((data) => [
                              vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
                            ])
                          };
                        }),
                        vue.renderList(vue.unref(extraSlots), (_, key) => {
                          return {
                            name: key,
                            fn: vue.withCtx((data) => [
                              vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
                            ])
                          };
                        })
                      ]), 1032, ["modelValue", "row-props", "col-props", "columns"])
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            )) : (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 1 },
              [
                vue.createCommentVNode(" \u666E\u901A\u8868\u5355 "),
                vue.createVNode(formContent.default, {
                  modelValue: state.values,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => state.values = $event),
                  "row-props": _ctx.rowProps,
                  "col-props": _ctx.colProps,
                  columns: state.subColumns,
                  "has-label": _ctx.hasLabel,
                  onChange: handleChange
                }, vue.createSlots({
                  _: 2
                  /* DYNAMIC */
                }, [
                  vue.renderList(vue.unref(labelSlots), (_, key) => {
                    return {
                      name: key,
                      fn: vue.withCtx((data) => [
                        vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
                      ])
                    };
                  }),
                  vue.renderList(vue.unref(fieldSlots), (_, key) => {
                    return {
                      name: key,
                      fn: vue.withCtx((data) => [
                        vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
                      ])
                    };
                  }),
                  vue.renderList(vue.unref(extraSlots), (_, key) => {
                    return {
                      name: key,
                      fn: vue.withCtx((data) => [
                        vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
                      ])
                    };
                  }),
                  _ctx.$slots["search-footer"] ? {
                    name: "search-footer",
                    fn: vue.withCtx(() => [
                      vue.renderSlot(_ctx.$slots, "search-footer")
                    ]),
                    key: "0"
                  } : void 0
                ]), 1032, ["modelValue", "row-props", "col-props", "columns", "has-label"])
              ],
              64
              /* STABLE_FRAGMENT */
            ))
          ]),
          _ctx.hasFooter ? (vue.openBlock(), vue.createElementBlock(
            "div",
            {
              key: 0,
              class: "plus-form__footer",
              style: vue.normalizeStyle(style.value)
            },
            [
              vue.renderSlot(_ctx.$slots, "footer", vue.normalizeProps(vue.guardReactiveProps({ handleReset, handleSubmit })), () => [
                _ctx.hasReset ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElButton), {
                  key: 0,
                  onClick: handleReset
                }, {
                  default: vue.withCtx(() => [
                    vue.createCommentVNode(" \u91CD\u7F6E "),
                    vue.createTextVNode(
                      " " + vue.toDisplayString(_ctx.resetText || vue.unref(t)("plus.form.resetText")),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                })) : vue.createCommentVNode("v-if", true),
                vue.createVNode(vue.unref(elementPlus.ElButton), {
                  type: "primary",
                  loading: _ctx.submitLoading,
                  onClick: handleSubmit
                }, {
                  default: vue.withCtx(() => [
                    vue.createCommentVNode(" \u63D0\u4EA4 "),
                    vue.createTextVNode(
                      " " + vue.toDisplayString(_ctx.submitText || vue.unref(t)("plus.form.submitText")),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["loading"])
              ])
            ],
            4
            /* STYLE */
          )) : vue.createCommentVNode("v-if", true)
        ]),
        _: 3
        /* FORWARDED */
      }, 16, ["rules", "label-width", "class", "label-position", "label-suffix", "model"]);
    };
  }
});

exports.default = _sfc_main;
