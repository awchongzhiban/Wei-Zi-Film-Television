'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var lodashEs = require('lodash-es');
var elementPlus = require('element-plus');
require('../../../hooks/index.js');
var index = require('../../form/index.js');
var useLocale = require('../../../hooks/useLocale.js');

var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusStepsForm"
  },
  __name: "index",
  props: {
    modelValue: { type: Number, required: true, default: 1 },
    data: { type: Array, required: true, default: () => [] }
  },
  emits: ["pre", "next", "update:modelValue", "change"],
  setup(__props, { emit }) {
    const props = __props;
    const { t } = useLocale.useLocale();
    const active = vue.ref(lodashEs.cloneDeep(props.modelValue));
    const handleChange = (values, column) => {
      emit("change", values, column);
    };
    const pre = () => {
      if (active.value-- > props.data.length + 1)
        active.value = 1;
      emit("pre", active.value);
      emit("update:modelValue", active.value);
    };
    const next = (values) => {
      if (active.value++ > props.data.length - 1)
        active.value = props.data.length;
      emit("next", active.value, values);
      emit("update:modelValue", active.value);
    };
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock(
        "div",
        {
          class: vue.normalizeClass(["plus-steps-form", _ctx.$attrs.direction === "vertical" ? "plus-steps-from-vertical" : ""])
        },
        [
          vue.createVNode(vue.unref(elementPlus.ElSteps), vue.mergeProps({
            active: active.value,
            "finish-status": "success"
          }, _ctx.$attrs), {
            default: vue.withCtx(() => [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(_ctx.data, (item) => {
                  return vue.openBlock(), vue.createBlock(
                    vue.unref(elementPlus.ElStep),
                    vue.mergeProps({
                      key: item.title
                    }, item),
                    vue.createSlots({
                      _: 2
                      /* DYNAMIC */
                    }, [
                      _ctx.$slots.icon ? {
                        name: "icon",
                        fn: vue.withCtx(() => [
                          vue.renderSlot(_ctx.$slots, "icon", {
                            icon: item.icon,
                            title: item.title,
                            description: item.description
                          })
                        ]),
                        key: "0"
                      } : void 0,
                      _ctx.$slots.title ? {
                        name: "title",
                        fn: vue.withCtx(() => [
                          vue.renderSlot(_ctx.$slots, "title", {
                            icon: item.icon,
                            title: item.title,
                            description: item.description
                          })
                        ]),
                        key: "1"
                      } : void 0,
                      _ctx.$slots.description ? {
                        name: "description",
                        fn: vue.withCtx(() => [
                          vue.renderSlot(_ctx.$slots, "description", {
                            icon: item.icon,
                            title: item.title,
                            description: item.description
                          })
                        ]),
                        key: "2"
                      } : void 0
                    ]),
                    1040
                    /* FULL_PROPS, DYNAMIC_SLOTS */
                  );
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            _: 3
            /* FORWARDED */
          }, 16, ["active"]),
          vue.createVNode(vue.unref(index.PlusForm), vue.mergeProps(_ctx.data[active.value - 1].form, {
            "has-reset": active.value !== 1,
            "submit-text": active.value === _ctx.data.length ? vue.unref(t)("plus.stepsForm.submitText") : vue.unref(t)("plus.stepsForm.nextText"),
            "reset-text": vue.unref(t)("plus.stepsForm.preText"),
            onSubmit: next,
            onReset: pre,
            onChange: handleChange
          }), null, 16, ["has-reset", "submit-text", "reset-text"])
        ],
        2
        /* CLASS */
      );
    };
  }
});

exports.default = _sfc_main;
