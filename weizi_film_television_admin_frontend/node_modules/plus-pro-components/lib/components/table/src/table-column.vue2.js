'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var index$2 = require('../../display-item/index.js');
var index = require('../../utils/index.js');
require('../../../constants/index.js');
var iconsVue = require('@element-plus/icons-vue');
var index$1 = require('../../render/index.js');
var elementPlus = require('element-plus');
var form = require('../../../constants/form.js');
var is = require('../../utils/is.js');

const _hoisted_1 = { class: "plus-table-column__header" };
var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusTableTableColumn"
  },
  __name: "table-column",
  props: {
    columns: { type: Array, required: false, default: () => [] }
  },
  emits: ["formChange"],
  setup(__props, { expose: __expose, emit }) {
    const plusDisplayItemInstance = vue.shallowRef();
    const formRef = vue.inject(form.TableFormRefInjectionKey);
    vue.watch(plusDisplayItemInstance, (event) => {
      const data = {};
      const list = (event == null ? void 0 : event.map((item) => ({ ...item, ...item == null ? void 0 : item.getDisplayItemInstance() }))) || [];
      list.forEach((item) => {
        if (!data[item.index]) {
          data[item.index] = [];
        }
        data[item.index].push(item);
      });
      formRef.value = data;
    });
    const getKey = (item) => index.getTableKey(item, true);
    const handleChange = (data, index, column, item) => {
      emit("formChange", { ...data, index, column: { ...column, ...item } });
    };
    __expose({
      plusDisplayItemInstance
    });
    return (_ctx, _cache) => {
      return vue.openBlock(true), vue.createElementBlock(
        vue.Fragment,
        null,
        vue.renderList(_ctx.columns, (item) => {
          return vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElTableColumn), vue.mergeProps({
            key: getKey(item),
            "class-name": "plus-table-column"
          }, item.tableColumnProps, {
            prop: item.prop,
            width: item.width,
            "min-width": item.minWidth
          }), {
            header: vue.withCtx(() => [
              vue.createElementVNode("span", _hoisted_1, [
                item.renderHeader && vue.unref(is.isFunction)(item.renderHeader) ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.PlusRender), {
                  key: 0,
                  render: item.renderHeader,
                  params: item,
                  "callback-value": item.label
                }, null, 8, ["render", "params", "callback-value"])) : (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  { key: 1 },
                  [
                    vue.createCommentVNode("\u8868\u683C\u5355\u5143\u683CHeader\u7684\u63D2\u69FD "),
                    vue.renderSlot(_ctx.$slots, vue.unref(index.getTableHeaderSlotName)(item.prop), {
                      prop: item.prop,
                      label: item.label,
                      fieldProps: item.fieldProps,
                      valueType: item.valueType,
                      column: item
                    }, () => [
                      vue.createTextVNode(
                        vue.toDisplayString(item.label),
                        1
                        /* TEXT */
                      )
                    ])
                  ],
                  2112
                  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                )),
                item.tooltip ? (vue.openBlock(), vue.createBlock(
                  vue.unref(elementPlus.ElTooltip),
                  vue.mergeProps({
                    key: 2,
                    placement: "top"
                  }, vue.unref(index.getTooltip)(item.tooltip)),
                  {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(elementPlus.ElIcon), {
                        class: "plus-table-column__header__icon",
                        size: 16
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(iconsVue.QuestionFilled))
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1040
                  /* FULL_PROPS, DYNAMIC_SLOTS */
                )) : vue.createCommentVNode("v-if", true)
              ])
            ]),
            default: vue.withCtx(({ row, column, $index }) => [
              vue.createVNode(vue.unref(index$2.PlusDisplayItem), {
                ref_for: true,
                ref_key: "plusDisplayItemInstance",
                ref: plusDisplayItemInstance,
                column: item,
                row,
                index: $index,
                onChange: (data) => handleChange(data, $index, column, item)
              }, vue.createSlots({
                _: 2
                /* DYNAMIC */
              }, [
                _ctx.$slots[vue.unref(index.getFieldSlotName)(item.prop)] ? {
                  name: vue.unref(index.getFieldSlotName)(item.prop),
                  fn: vue.withCtx((data) => [
                    vue.renderSlot(_ctx.$slots, vue.unref(index.getFieldSlotName)(item.prop), vue.normalizeProps(vue.guardReactiveProps(data)))
                  ]),
                  key: "0"
                } : void 0,
                _ctx.$slots[vue.unref(index.getExtraSlotName)(item.prop)] ? {
                  name: vue.unref(index.getExtraSlotName)(item.prop),
                  fn: vue.withCtx((data) => [
                    vue.renderSlot(_ctx.$slots, vue.unref(index.getExtraSlotName)(item.prop), vue.normalizeProps(vue.guardReactiveProps(data)))
                  ]),
                  key: "1"
                } : void 0,
                _ctx.$slots[vue.unref(index.getTableCellSlotName)(item.prop)] ? {
                  name: vue.unref(index.getTableCellSlotName)(item.prop),
                  fn: vue.withCtx((data) => [
                    vue.renderSlot(_ctx.$slots, vue.unref(index.getTableCellSlotName)(item.prop), vue.normalizeProps(vue.guardReactiveProps(data)))
                  ]),
                  key: "2"
                } : void 0
              ]), 1032, ["column", "row", "index", "onChange"])
            ]),
            _: 2
            /* DYNAMIC */
          }, 1040, ["prop", "width", "min-width"]);
        }),
        128
        /* KEYED_FRAGMENT */
      );
    };
  }
});

exports.default = _sfc_main;
