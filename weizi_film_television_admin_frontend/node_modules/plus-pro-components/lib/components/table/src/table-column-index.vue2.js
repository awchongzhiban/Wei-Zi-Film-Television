'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
require('../../../constants/index.js');
require('../../utils/index.js');
var elementPlus = require('element-plus');
var page = require('../../../constants/page.js');
var is = require('../../utils/is.js');

var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusTableTableColumnIndex"
  },
  __name: "table-column-index",
  props: {
    pageInfo: { type: null, required: false, default: () => ({ ...page.DefaultPageInfo }) },
    indexTableColumnProps: { type: null, required: false, default: () => ({}) },
    max: { type: Number, required: false, default: 999 },
    indexContentStyle: { type: [Object, Function], required: false, default: () => ({}) }
  },
  setup(__props) {
    const props = __props;
    const getTableIndex = (index) => {
      var _a, _b;
      const i = ((((_a = props.pageInfo) == null ? void 0 : _a.page) || page.DefaultPageInfo.page) - 1) * (((_b = props.pageInfo) == null ? void 0 : _b.pageSize) || page.DefaultPageInfo.page) + index + 1;
      return +i;
    };
    const indexContentStyle = (row, index) => {
      if (is.isFunction(props.indexContentStyle)) {
        return props.indexContentStyle(row, index);
      } else if (is.isPlainObject(props.indexContentStyle)) {
        return props.indexContentStyle;
      } else {
        return {};
      }
    };
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createBlock(
        vue.unref(elementPlus.ElTableColumn),
        vue.mergeProps({
          key: "index",
          label: "#",
          fixed: "left",
          type: "index",
          "class-name": "plus-table-column-index",
          width: "60",
          align: "center",
          index: getTableIndex
        }, _ctx.indexTableColumnProps),
        {
          default: vue.withCtx(({ row, $index }) => [
            getTableIndex($index) > 999 ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElTooltip), {
              key: 0,
              content: String(getTableIndex($index)),
              placement: "top-start"
            }, {
              default: vue.withCtx(() => [
                vue.createElementVNode(
                  "div",
                  {
                    class: "plus-table-column-index__content",
                    style: vue.normalizeStyle(indexContentStyle(row, $index))
                  },
                  vue.toDisplayString(getTableIndex($index)),
                  5
                  /* TEXT, STYLE */
                )
              ]),
              _: 2
              /* DYNAMIC */
            }, 1032, ["content"])) : (vue.openBlock(), vue.createElementBlock(
              "div",
              {
                key: 1,
                class: "plus-table-column-index__content",
                style: vue.normalizeStyle(indexContentStyle(row, $index))
              },
              vue.toDisplayString(getTableIndex($index)),
              5
              /* TEXT, STYLE */
            ))
          ]),
          _: 1
          /* STABLE */
        },
        16
        /* FULL_PROPS */
      );
    };
  }
});

exports.default = _sfc_main;
