import type { Options as SortableOptions } from 'sortablejs';
import type { RecordType } from 'plus-pro-components/es/types';
export interface PlusTableColumnDragSortProps {
    sortable: SortableOptions | boolean;
    tableInstance: any;
    dragSortableTableColumnProps: RecordType;
}
export interface PlusTableColumnDragSortEmits {
    (e: 'dragSortEnd', newIndex: number, oldIndex: number): void;
}
declare const _default: import("vue").DefineComponent<{
    sortable: {
        type: BooleanConstructor;
        required: true;
        skipCheck: boolean;
        default: boolean;
    };
    tableInstance: {
        type: null;
        required: true;
        default: null;
    };
    dragSortableTableColumnProps: {
        type: null;
        required: true;
        default: () => {};
    };
}, {
    props: any;
    emit: (event: "dragSortEnd", ...args: any[]) => void;
    t: import("plus-pro-components/es/hooks").Translator;
    rowDrop: () => void;
    readonly ElTableColumn: import("element-plus/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        type: {
            type: StringConstructor;
            default: string;
        };
        label: StringConstructor;
        className: StringConstructor;
        labelClassName: StringConstructor;
        property: StringConstructor;
        prop: StringConstructor;
        width: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        minWidth: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        renderHeader: import("vue").PropType<(data: {
            column: import("element-plus/es/components/table/src/table-column/defaults").TableColumnCtx<any>;
            $index: number;
        }) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        sortable: {
            type: (BooleanConstructor | StringConstructor)[];
            default: boolean;
        };
        sortMethod: import("vue").PropType<(a: any, b: any) => number>;
        sortBy: import("vue").PropType<string | string[] | ((row: any, index: number) => string)>;
        resizable: {
            type: BooleanConstructor;
            default: boolean;
        };
        columnKey: StringConstructor;
        align: StringConstructor;
        headerAlign: StringConstructor;
        showOverflowTooltip: {
            type: import("vue").PropType<boolean | Partial<Pick<import("element-plus").ElTooltipProps, "offset" | "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
            default: undefined;
        };
        fixed: (BooleanConstructor | StringConstructor)[];
        formatter: import("vue").PropType<(row: any, column: import("element-plus/es/components/table/src/table-column/defaults").TableColumnCtx<any>, cellValue: any, index: number) => string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        selectable: import("vue").PropType<(row: any, index: number) => boolean>;
        reserveSelection: BooleanConstructor;
        filterMethod: import("vue").PropType<import("element-plus/es/components/table/src/table-column/defaults").FilterMethods<any>>;
        filteredValue: import("vue").PropType<string[]>;
        filters: import("vue").PropType<import("element-plus/es/components/table/src/table-column/defaults").Filters>;
        filterPlacement: StringConstructor;
        filterMultiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        filterClassName: StringConstructor;
        index: import("vue").PropType<number | ((index: number) => number)>;
        sortOrders: {
            type: import("vue").PropType<("ascending" | "descending" | null)[]>;
            default: () => (string | null)[];
            validator: (val: ("ascending" | "descending" | null)[]) => boolean;
        };
    }, void, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: StringConstructor;
            default: string;
        };
        label: StringConstructor;
        className: StringConstructor;
        labelClassName: StringConstructor;
        property: StringConstructor;
        prop: StringConstructor;
        width: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        minWidth: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        renderHeader: import("vue").PropType<(data: {
            column: import("element-plus/es/components/table/src/table-column/defaults").TableColumnCtx<any>;
            $index: number;
        }) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        sortable: {
            type: (BooleanConstructor | StringConstructor)[];
            default: boolean;
        };
        sortMethod: import("vue").PropType<(a: any, b: any) => number>;
        sortBy: import("vue").PropType<string | string[] | ((row: any, index: number) => string)>;
        resizable: {
            type: BooleanConstructor;
            default: boolean;
        };
        columnKey: StringConstructor;
        align: StringConstructor;
        headerAlign: StringConstructor;
        showOverflowTooltip: {
            type: import("vue").PropType<boolean | Partial<Pick<import("element-plus").ElTooltipProps, "offset" | "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined>;
            default: undefined;
        };
        fixed: (BooleanConstructor | StringConstructor)[];
        formatter: import("vue").PropType<(row: any, column: import("element-plus/es/components/table/src/table-column/defaults").TableColumnCtx<any>, cellValue: any, index: number) => string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        selectable: import("vue").PropType<(row: any, index: number) => boolean>;
        reserveSelection: BooleanConstructor;
        filterMethod: import("vue").PropType<import("element-plus/es/components/table/src/table-column/defaults").FilterMethods<any>>;
        filteredValue: import("vue").PropType<string[]>;
        filters: import("vue").PropType<import("element-plus/es/components/table/src/table-column/defaults").Filters>;
        filterPlacement: StringConstructor;
        filterMultiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        filterClassName: StringConstructor;
        index: import("vue").PropType<number | ((index: number) => number)>;
        sortOrders: {
            type: import("vue").PropType<("ascending" | "descending" | null)[]>;
            default: () => (string | null)[];
            validator: (val: ("ascending" | "descending" | null)[]) => boolean;
        };
    }>>, {
        type: string;
        width: string | number;
        minWidth: string | number;
        showOverflowTooltip: boolean | Partial<Pick<import("element-plus").ElTooltipProps, "offset" | "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "placement" | "popperOptions" | "showAfter" | "hideAfter">> | undefined;
        sortOrders: ("ascending" | "descending" | null)[];
        sortable: string | boolean;
        resizable: boolean;
        reserveSelection: boolean;
        filterMultiple: boolean;
    }, {}>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "dragSortEnd"[], "dragSortEnd", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    sortable: {
        type: BooleanConstructor;
        required: true;
        skipCheck: boolean;
        default: boolean;
    };
    tableInstance: {
        type: null;
        required: true;
        default: null;
    };
    dragSortableTableColumnProps: {
        type: null;
        required: true;
        default: () => {};
    };
}>> & {
    onDragSortEnd?: ((...args: any[]) => any) | undefined;
}, {
    dragSortableTableColumnProps: any;
    tableInstance: any;
}, {}>;
export default _default;
