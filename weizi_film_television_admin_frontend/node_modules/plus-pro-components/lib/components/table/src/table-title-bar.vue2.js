'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var lodashEs = require('lodash-es');
var iconsVue = require('@element-plus/icons-vue');
var index$1 = require('../../popover/index.js');
require('../../../hooks/index.js');
var index = require('../../utils/index.js');
var elementPlus = require('element-plus');
var Sortable = require('sortablejs');
var useLocale = require('../../../hooks/useLocale.js');
var is = require('../../utils/is.js');

const _hoisted_1 = { class: "plus-table-title-bar" };
const _hoisted_2 = { class: "plus-table-title-bar__title" };
const _hoisted_3 = { class: "plus-table-title-bar__toolbar" };
const _hoisted_4 = { class: "plus-table-title-bar__toolbar__density" };
const _hoisted_5 = /* @__PURE__ */ vue.createElementVNode(
  "svg",
  {
    viewBox: "0 0 1024 1024",
    focusable: "false",
    "data-icon": "column-height",
    fill: "currentColor",
    "aria-hidden": "true"
  },
  [
    /* @__PURE__ */ vue.createElementVNode("path", { d: "M840 836H184c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h656c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm0-724H184c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h656c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zM610.8 378c6 0 9.4-7 5.7-11.7L515.7 238.7a7.14 7.14 0 00-11.3 0L403.6 366.3a7.23 7.23 0 005.7 11.7H476v268h-62.8c-6 0-9.4 7-5.7 11.7l100.8 127.5c2.9 3.7 8.5 3.7 11.3 0l100.8-127.5c3.7-4.7.4-11.7-5.7-11.7H548V378h62.8z" })
  ],
  -1
  /* HOISTED */
);
const _hoisted_6 = { key: 1 };
var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusTableToolbar"
  },
  __name: "table-title-bar",
  props: {
    columns: { type: Array, required: false, default: () => [] },
    titleBar: { type: Boolean, required: false, skipCheck: true, default: true },
    filterTableHeaderOverflowLabelLength: { type: Number, required: false, default: 6 },
    defaultSize: { type: null, required: false, default: "default" },
    changeColumns: { type: Array, required: false, default: () => [] }
  },
  emits: ["filterTable", "clickDensity", "refresh"],
  setup(__props, { emit }) {
    const props = __props;
    const checkboxGroupInstance = vue.ref(null);
    const titleBarConfig = vue.computed(() => props.titleBar);
    const iconSize = vue.computed(() => {
      var _a;
      return ((_a = titleBarConfig.value.icon) == null ? void 0 : _a.size) || 18;
    });
    const iconColor = vue.computed(() => {
      var _a;
      return (_a = titleBarConfig.value.icon) == null ? void 0 : _a.color;
    });
    const { t } = useLocale.useLocale();
    const buttonNameDensity = [
      {
        size: "default",
        text: vue.computed(() => t("plus.table.default"))
      },
      {
        size: "large",
        text: vue.computed(() => t("plus.table.loose"))
      },
      {
        size: "small",
        text: vue.computed(() => t("plus.table.compact"))
      }
    ];
    const subColumns = vue.computed(() => props.columns.filter((item) => vue.unref(item.hideInTable) !== true));
    const state = vue.reactive({
      checkAll: true,
      isIndeterminate: false,
      bigImageVisible: false,
      srcList: [],
      checkList: lodashEs.cloneDeep(subColumns.value).map((item) => index.getTableKey(item))
    });
    const handleCheckAllChange = (val) => {
      state.checkList = val ? lodashEs.cloneDeep(subColumns.value).map((item) => index.getTableKey(item)) : [];
      state.isIndeterminate = false;
    };
    const handleFilterTableConfirm = () => {
      const columns = lodashEs.cloneDeep(subColumns.value);
      const filterColumns = columns.filter((item) => state.checkList.includes(index.getTableKey(item)));
      emit("filterTable", filterColumns);
    };
    const handleCheckGroupChange = (value) => {
      const checkedCount = value.length;
      state.checkAll = checkedCount === subColumns.value.length;
      state.isIndeterminate = checkedCount > 0 && checkedCount < subColumns.value.length;
      handleFilterTableConfirm();
    };
    const handleClickDensity = (size) => {
      emit("clickDensity", size);
    };
    const handleRefresh = () => {
      emit("refresh");
    };
    const getLabel = (label) => {
      if ((label == null ? void 0 : label.length) <= props.filterTableHeaderOverflowLabelLength) {
        return label;
      }
      return (label == null ? void 0 : label.slice(0, props.filterTableHeaderOverflowLabelLength)) + "...";
    };
    const handleDrop = () => {
      var _a, _b;
      const checkbox = checkboxGroupInstance.value;
      if (!checkbox)
        return;
      let config = {
        onEnd: handleDragEnd
      };
      const dragSort = (_b = (_a = props.titleBar) == null ? void 0 : _a.columnSetting) == null ? void 0 : _b.dragSort;
      if (is.isPlainObject(dragSort)) {
        config = { ...config, ...dragSort, handle: ".plus-handle" };
      }
      new Sortable(checkbox, config);
    };
    const handleDragEnd = (event) => {
      const subDragCheckboxList = lodashEs.cloneDeep(props.changeColumns);
      const draggedCheckbox = props.changeColumns[event.oldIndex];
      subDragCheckboxList.splice(event.oldIndex, 1);
      subDragCheckboxList.splice(event.newIndex, 0, draggedCheckbox);
      emit("filterTable", subDragCheckboxList);
    };
    vue.onMounted(() => {
      var _a, _b;
      const dragSort = (_b = (_a = props.titleBar) == null ? void 0 : _a.columnSetting) == null ? void 0 : _b.dragSort;
      if (dragSort !== false) {
        if (checkboxGroupInstance.value) {
          handleDrop();
        }
      }
    });
    return (_ctx, _cache) => {
      var _a, _b, _c;
      return vue.openBlock(), vue.createElementBlock("div", _hoisted_1, [
        vue.createElementVNode("div", _hoisted_2, [
          vue.renderSlot(_ctx.$slots, "title", {}, () => [
            vue.createTextVNode(
              vue.toDisplayString(titleBarConfig.value.title),
              1
              /* TEXT */
            )
          ])
        ]),
        vue.createElementVNode("div", _hoisted_3, [
          vue.renderSlot(_ctx.$slots, "toolbar"),
          ((_a = titleBarConfig.value) == null ? void 0 : _a.refresh) === true ? (vue.openBlock(), vue.createElementBlock("span", {
            key: 0,
            class: "plus-table-title-bar__toolbar__refresh",
            onClick: handleRefresh
          }, [
            vue.createVNode(vue.unref(elementPlus.ElTooltip), {
              effect: "dark",
              content: vue.unref(t)("plus.table.refresh"),
              placement: "top"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(vue.unref(elementPlus.ElIcon), {
                  size: iconSize.value,
                  color: iconColor.value,
                  class: "plus-table-title-bar__toolbar__icon"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(iconsVue.RefreshRight))
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["size", "color"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["content"])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" \u8868\u683C\u5BC6\u5EA6 "),
          ((_b = titleBarConfig.value) == null ? void 0 : _b.density) !== false ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.PlusPopover), {
            key: 1,
            placement: "bottom",
            width: 150,
            trigger: "click",
            title: vue.unref(t)("plus.table.density")
          }, {
            reference: vue.withCtx(() => [
              vue.createVNode(vue.unref(elementPlus.ElTooltip), {
                effect: "dark",
                content: vue.unref(t)("plus.table.density"),
                placement: "top"
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(vue.unref(elementPlus.ElIcon), {
                    size: iconSize.value,
                    color: iconColor.value,
                    class: "plus-table-title-bar__toolbar__icon"
                  }, {
                    default: vue.withCtx(() => [
                      _hoisted_5
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["size", "color"])
                ]),
                _: 1
                /* STABLE */
              }, 8, ["content"])
            ]),
            default: vue.withCtx(() => [
              vue.createElementVNode("div", _hoisted_4, [
                (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(buttonNameDensity, (item) => {
                    return vue.createVNode(vue.unref(elementPlus.ElButton), {
                      key: item.size,
                      plain: _ctx.defaultSize !== item.size,
                      type: "primary",
                      size: "small",
                      onClick: ($event) => handleClickDensity(item.size)
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(
                          vue.toDisplayString(vue.unref(item.text)),
                          1
                          /* TEXT */
                        )
                      ]),
                      _: 2
                      /* DYNAMIC */
                    }, 1032, ["plain", "onClick"]);
                  }),
                  64
                  /* STABLE_FRAGMENT */
                ))
              ])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["title"])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" \u5217\u8BBE\u7F6E "),
          ((_c = titleBarConfig.value) == null ? void 0 : _c.columnSetting) !== false ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.PlusPopover), {
            key: 2,
            placement: "bottom",
            width: 100,
            trigger: "click",
            title: vue.unref(t)("plus.table.columnSettings")
          }, {
            reference: vue.withCtx(() => [
              vue.createVNode(vue.unref(elementPlus.ElTooltip), {
                effect: "dark",
                content: vue.unref(t)("plus.table.columnSettings"),
                placement: "top"
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(vue.unref(elementPlus.ElIcon), {
                    size: iconSize.value,
                    color: iconColor.value,
                    class: "plus-table-title-bar__toolbar__icon"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(iconsVue.Setting))
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["size", "color"])
                ]),
                _: 1
                /* STABLE */
              }, 8, ["content"])
            ]),
            default: vue.withCtx(() => [
              vue.createVNode(vue.unref(elementPlus.ElCheckbox), {
                modelValue: state.checkAll,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => state.checkAll = $event),
                indeterminate: state.isIndeterminate,
                onChange: handleCheckAllChange
              }, {
                default: vue.withCtx(() => [
                  vue.createTextVNode(
                    vue.toDisplayString(vue.unref(t)("plus.table.selectAll")),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["modelValue", "indeterminate"]),
              vue.createVNode(vue.unref(elementPlus.ElCheckboxGroup), {
                modelValue: state.checkList,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => state.checkList = $event),
                onChange: handleCheckGroupChange
              }, {
                default: vue.withCtx(() => [
                  vue.createElementVNode(
                    "div",
                    {
                      ref_key: "checkboxGroupInstance",
                      ref: checkboxGroupInstance,
                      class: "plus-checkbox-sortable-list"
                    },
                    [
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList(subColumns.value, (item) => {
                          return vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElCheckbox), {
                            key: item.label,
                            label: vue.unref(index.getTableKey)(item),
                            disabled: item.headerFilter,
                            class: "plus-table-title-bar__toolbar__checkbox__item plus-handle"
                          }, {
                            default: vue.withCtx(() => {
                              var _a2;
                              return [
                                ((_a2 = item.label) == null ? void 0 : _a2.length) > _ctx.filterTableHeaderOverflowLabelLength ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElTooltip), {
                                  key: 0,
                                  content: item.label,
                                  placement: "right-start"
                                }, {
                                  default: vue.withCtx(() => [
                                    vue.createTextVNode(
                                      vue.toDisplayString(getLabel(item.label)),
                                      1
                                      /* TEXT */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                }, 1032, ["content"])) : (vue.openBlock(), vue.createElementBlock(
                                  "span",
                                  _hoisted_6,
                                  vue.toDisplayString(getLabel(item.label)),
                                  1
                                  /* TEXT */
                                ))
                              ];
                            }),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["label", "disabled"]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ],
                    512
                    /* NEED_PATCH */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["modelValue"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["title"])) : vue.createCommentVNode("v-if", true)
        ])
      ]);
    };
  }
});

exports.default = _sfc_main;
