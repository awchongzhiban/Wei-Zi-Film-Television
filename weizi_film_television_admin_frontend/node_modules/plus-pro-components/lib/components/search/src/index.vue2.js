'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var index$1 = require('../../form/index.js');
var iconsVue = require('@element-plus/icons-vue');
var lodashEs = require('lodash-es');
require('../../../hooks/index.js');
var elementPlus = require('element-plus');
var index = require('../../utils/index.js');
var useLocale = require('../../../hooks/useLocale.js');

var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusSearch"
  },
  __name: "index",
  props: {
    modelValue: { type: null, required: false, default: () => ({}) },
    defaultValues: { type: null, required: false, default: () => ({}) },
    columns: { type: Array, required: false, default: () => [] },
    hasFooter: { type: Boolean, required: false, default: true },
    hasReset: { type: Boolean, required: false, default: true },
    hasUnfold: { type: Boolean, required: false, default: true },
    searchText: { type: String, required: false, default: "" },
    resetText: { type: String, required: false, default: "" },
    searchLoading: { type: Boolean, required: false, default: false },
    inline: { type: Boolean, required: false, default: true },
    showNumber: { type: Number, required: false, default: 2 },
    rowProps: { type: Object, required: false, default: () => ({
      gutter: 20
    }) },
    colProps: { type: Object, required: false, default: () => ({
      xs: 24,
      sm: 12,
      md: 8,
      lg: 8,
      xl: 6
    }) }
  },
  emits: ["update:modelValue", "search", "change", "reset"],
  setup(__props, { expose: __expose, emit }) {
    const props = __props;
    const { t } = useLocale.useLocale();
    const plusFormInstance = vue.ref();
    const state = vue.reactive({
      values: {},
      subColumns: [],
      originData: [],
      isShowUnfold: false
    });
    const slots = vue.useSlots();
    const labelSlots = index.filterSlots(slots, index.getLabelSlotName());
    const fieldSlots = index.filterSlots(slots, index.getFieldSlotName());
    const extraSlots = index.filterSlots(slots, index.getExtraSlotName());
    state.originData = vue.computed(() => {
      return props.columns.filter((item) => vue.unref(item.hideInSearch) !== true).map((item) => ({ ...item, hideInForm: false }));
    });
    state.subColumns = vue.computed(() => {
      const data = lodashEs.cloneDeep(state.originData);
      if (props.hasUnfold && !state.isShowUnfold) {
        return data.slice(0, props.showNumber);
      } else {
        return data;
      }
    });
    vue.watch(
      () => props.modelValue,
      (val) => {
        state.values = val;
      },
      {
        immediate: true
      }
    );
    const handleChange = async (values, column) => {
      emit("change", values, column);
      emit("update:modelValue", values);
    };
    const handleSearch = async () => {
      emit("search", state.values);
    };
    const handleReset = () => {
      state.values = { ...props.defaultValues };
      emit("reset", state.values);
    };
    const handleUnfold = () => {
      state.isShowUnfold = !state.isShowUnfold;
    };
    __expose({
      plusFormInstance,
      handleReset,
      handleSearch,
      handleUnfold
    });
    const { isShowUnfold, subColumns } = vue.toRefs(state);
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createBlock(vue.unref(index$1.PlusForm), vue.mergeProps({
        ref_key: "plusFormInstance",
        ref: plusFormInstance
      }, _ctx.$attrs, {
        modelValue: state.values,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => state.values = $event),
        inline: _ctx.inline,
        "row-props": _ctx.rowProps,
        "col-props": _ctx.colProps,
        columns: vue.unref(subColumns),
        class: "plus-search",
        "has-footer": false,
        onChange: handleChange
      }), vue.createSlots({
        "search-footer": vue.withCtx(() => [
          vue.renderSlot(_ctx.$slots, "footer", {
            isShowUnfold: vue.unref(isShowUnfold),
            handleReset,
            handleSearch,
            handleUnfold
          }, () => [
            _ctx.hasFooter ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElFormItem), {
              key: 0,
              class: "plus-search__button__wrapper"
            }, {
              default: vue.withCtx(() => [
                _ctx.hasReset ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElButton), {
                  key: 0,
                  icon: vue.unref(iconsVue.RefreshRight),
                  onClick: handleReset
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      vue.toDisplayString(_ctx.resetText || vue.unref(t)("plus.search.resetText")),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["icon"])) : vue.createCommentVNode("v-if", true),
                vue.createVNode(vue.unref(elementPlus.ElButton), {
                  type: "primary",
                  loading: _ctx.searchLoading,
                  icon: vue.unref(iconsVue.Search),
                  onClick: handleSearch
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      vue.toDisplayString(_ctx.searchText || vue.unref(t)("plus.search.searchText")),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["loading", "icon"]),
                _ctx.hasUnfold && state.originData.length > _ctx.showNumber ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElButton), {
                  key: 1,
                  type: "primary",
                  link: "",
                  onClick: handleUnfold
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      vue.toDisplayString(vue.unref(isShowUnfold) ? vue.unref(t)("plus.search.retract") : vue.unref(t)("plus.search.expand")) + " ",
                      1
                      /* TEXT */
                    ),
                    vue.createVNode(vue.unref(elementPlus.ElIcon), null, {
                      default: vue.withCtx(() => [
                        vue.unref(isShowUnfold) ? (vue.openBlock(), vue.createBlock(vue.unref(iconsVue.ArrowUp), { key: 0 })) : (vue.openBlock(), vue.createBlock(vue.unref(iconsVue.ArrowDown), { key: 1 }))
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                })) : vue.createCommentVNode("v-if", true)
              ]),
              _: 1
              /* STABLE */
            })) : vue.createCommentVNode("v-if", true)
          ])
        ]),
        _: 2
        /* DYNAMIC */
      }, [
        vue.renderList(vue.unref(labelSlots), (_, key) => {
          return {
            name: key,
            fn: vue.withCtx((data) => [
              vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
            ])
          };
        }),
        vue.renderList(vue.unref(fieldSlots), (_, key) => {
          return {
            name: key,
            fn: vue.withCtx((data) => [
              vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
            ])
          };
        }),
        vue.renderList(vue.unref(extraSlots), (_, key) => {
          return {
            name: key,
            fn: vue.withCtx((data) => [
              vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
            ])
          };
        })
      ]), 1040, ["modelValue", "inline", "row-props", "col-props", "columns"]);
    };
  }
});

exports.default = _sfc_main;
