'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var iconsVue = require('@element-plus/icons-vue');
var index$1 = require('../../form/index.js');
var index = require('../../utils/index.js');
require('../../../hooks/index.js');
var index$2 = require('../../render/index.js');
var elementPlus = require('element-plus');
var useGetOptions = require('../../../hooks/useGetOptions.js');
var is = require('../../utils/is.js');
var format = require('../../utils/format.js');

const _hoisted_1 = ["innerHTML"];
const _hoisted_2 = { class: "plus-display-item" };
var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusDisplayItem"
  },
  __name: "index",
  props: {
    column: { type: null, required: true, default: () => ({ prop: "", label: "" }) },
    row: { type: null, required: true, default: () => ({}) },
    index: { type: Number, required: false, default: 0 }
  },
  emits: ["change"],
  setup(__props, { expose: __expose, emit }) {
    const props = __props;
    const isCellEdit = vue.ref(false);
    const isForm = vue.computed(() => props.column.editable === true || isCellEdit.value === true);
    const customFieldProps = vue.ref({});
    const formInstance = vue.ref();
    const options = useGetOptions.useGetOptions(props.column);
    const columns = vue.ref([]);
    const subRow = vue.ref(props.row);
    const displayValue = vue.computed({
      get() {
        return index.getValue(subRow.value, props.column.prop);
      },
      set(value) {
        index.setValue(subRow.value, props.column.prop, value);
      }
    });
    const modelValues = vue.computed({
      get() {
        return { [props.column.prop]: displayValue.value };
      },
      set(values) {
        displayValue.value = values[props.column.prop];
      }
    });
    const params = vue.computed(() => ({
      row: subRow.value,
      column: props.column,
      index: props.index
    }));
    const imageUrl = vue.computed(() => {
      const option = displayValue.value;
      if (option && typeof option === "string") {
        return { options: [option], url: option };
      }
      if (is.isArray(option)) {
        return { options: option, url: option[0] };
      }
      return { options: [], url: "" };
    });
    const getStatus = vue.computed(() => {
      var _a, _b, _c, _d;
      let option = (_a = options.value) == null ? void 0 : _a.find((i) => i.value === displayValue.value);
      if (((_b = props.column) == null ? void 0 : _b.customGetStatus) && is.isFunction((_c = props.column) == null ? void 0 : _c.customGetStatus)) {
        option = (_d = props.column) == null ? void 0 : _d.customGetStatus({
          options: options.value,
          value: displayValue.value,
          row: subRow.value
        });
      }
      if (!option) {
        return { label: "", value: "" };
      }
      return option;
    });
    vue.watch(
      () => props.column,
      (val) => {
        if (val) {
          columns.value = [val];
        }
      },
      {
        immediate: true,
        deep: true
      }
    );
    vue.watch(
      () => props.column.fieldProps,
      (val) => {
        index.getCustomProps(val, displayValue.value, subRow.value, props.index, "fieldProps").then((data) => {
          customFieldProps.value = data;
        }).catch((err) => {
          throw err;
        });
      },
      {
        immediate: true,
        deep: true
      }
    );
    vue.watch(
      () => props.row,
      (val) => {
        subRow.value = { ...val };
      },
      {
        deep: true
      }
    );
    const copy = (data) => {
      const url = data;
      const textarea = document.createElement("textarea");
      textarea.readOnly = true;
      textarea.style.position = "absolute";
      textarea.style.left = "-9999px";
      textarea.value = url;
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand("Copy");
      textarea.remove();
    };
    const handelClickCopy = (item, row) => {
      copy(row[item.prop]);
      row.isCopy = true;
      setTimeout(() => {
        row.isCopy = false;
      }, 3e3);
    };
    const handleChange = (values) => {
      emit("change", { value: values[props.column.prop], prop: props.column.prop, row: subRow });
    };
    const startCellEdit = () => {
      isCellEdit.value = true;
    };
    const stopCellEdit = () => {
      isCellEdit.value = false;
    };
    const getDisplayItemInstance = () => {
      return {
        index: props.index,
        prop: props.column.prop,
        formInstance: vue.computed(() => {
          var _a;
          return (_a = formInstance.value) == null ? void 0 : _a.formInstance;
        })
      };
    };
    __expose({
      startCellEdit,
      stopCellEdit,
      getDisplayItemInstance
    });
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        null,
        [
          vue.createCommentVNode(" \u8868\u5355\u7B2C\u4E00\u4F18\u5148\u7EA7 "),
          isForm.value ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.PlusForm), vue.mergeProps({
            key: 0,
            ref_key: "formInstance",
            ref: formInstance,
            modelValue: modelValues.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => modelValues.value = $event),
            model: modelValues.value,
            columns: columns.value,
            "has-footer": false,
            "has-label": false
          }, _ctx.column.formProps, {
            class: "plus-display-item__form",
            onChange: handleChange
          }), vue.createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            _ctx.$slots[vue.unref(index.getFieldSlotName)(_ctx.column.prop)] ? {
              name: vue.unref(index.getFieldSlotName)(_ctx.column.prop),
              fn: vue.withCtx((data) => [
                vue.renderSlot(_ctx.$slots, vue.unref(index.getFieldSlotName)(_ctx.column.prop), vue.mergeProps(data, { row: subRow.value }))
              ]),
              key: "0"
            } : void 0,
            _ctx.$slots[vue.unref(index.getExtraSlotName)(_ctx.column.prop)] ? {
              name: vue.unref(index.getExtraSlotName)(_ctx.column.prop),
              fn: vue.withCtx((data) => [
                vue.renderSlot(_ctx.$slots, vue.unref(index.getExtraSlotName)(_ctx.column.prop), vue.mergeProps(data, { row: subRow.value }))
              ]),
              key: "1"
            } : void 0
          ]), 1040, ["modelValue", "model", "columns"])) : _ctx.column.render && vue.unref(is.isFunction)(_ctx.column.render) ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            [
              vue.createCommentVNode(" \u81EA\u5B9A\u4E49\u663E\u793A "),
              vue.createVNode(vue.unref(index$2.PlusRender), {
                render: _ctx.column.render,
                params: params.value,
                "callback-value": displayValue.value,
                "custom-field-props": customFieldProps.value
              }, null, 8, ["render", "params", "callback-value", "custom-field-props"])
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : _ctx.$slots[vue.unref(index.getTableCellSlotName)(_ctx.column.prop)] ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 2 },
            [
              vue.createCommentVNode(" \u63D2\u69FD "),
              vue.renderSlot(_ctx.$slots, vue.unref(index.getTableCellSlotName)(_ctx.column.prop), {
                prop: _ctx.column.prop,
                valueType: _ctx.column.valueType,
                row: subRow.value,
                value: displayValue.value,
                fieldProps: customFieldProps.value,
                column: _ctx.column
              })
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : _ctx.column.renderHTML && vue.unref(is.isFunction)(_ctx.column.renderHTML) ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 3 },
            [
              vue.createCommentVNode("\u663E\u793AHTML "),
              vue.createElementVNode("span", {
                class: "plus-display-item",
                innerHTML: _ctx.column.renderHTML(displayValue.value, { row: subRow.value, column: _ctx.column, index: _ctx.index })
              }, null, 8, _hoisted_1)
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : _ctx.column.valueType === "img" ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 4 },
            [
              vue.createCommentVNode("\u663E\u793A\u56FE\u7247 "),
              vue.createVNode(vue.unref(elementPlus.ElImage), vue.mergeProps({
                class: "plus-display-item plus-display-item__image",
                fit: "cover",
                "preview-teleported": "",
                src: imageUrl.value.url,
                "preview-src-list": _ctx.column.preview !== false ? imageUrl.value.options : []
              }, customFieldProps.value), vue.createSlots({
                _: 2
                /* DYNAMIC */
              }, [
                vue.renderList(_ctx.column.fieldSlots, (fieldSlot, key) => {
                  return {
                    name: key,
                    fn: vue.withCtx((data) => [
                      (vue.openBlock(), vue.createBlock(
                        vue.resolveDynamicComponent(fieldSlot),
                        vue.normalizeProps(vue.guardReactiveProps(data)),
                        null,
                        16
                        /* FULL_PROPS */
                      ))
                    ])
                  };
                })
              ]), 1040, ["src", "preview-src-list"])
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : _ctx.column.valueType === "link" ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 5 },
            [
              vue.createCommentVNode("\u663E\u793A\u94FE\u63A5 "),
              vue.createVNode(
                vue.unref(elementPlus.ElLink),
                vue.mergeProps({
                  type: "primary",
                  class: "plus-display-item plus-display-item__link"
                }, customFieldProps.value),
                vue.createSlots({
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      " " + vue.toDisplayString(_ctx.column.linkText || displayValue.value),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, [
                  vue.renderList(_ctx.column.fieldSlots, (fieldSlot, key) => {
                    return {
                      name: key,
                      fn: vue.withCtx((data) => [
                        (vue.openBlock(), vue.createBlock(
                          vue.resolveDynamicComponent(fieldSlot),
                          vue.normalizeProps(vue.guardReactiveProps(data)),
                          null,
                          16
                          /* FULL_PROPS */
                        ))
                      ])
                    };
                  })
                ]),
                1040
                /* FULL_PROPS, DYNAMIC_SLOTS */
              )
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : _ctx.column.valueType === "date-picker" && displayValue.value ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 6 },
            [
              vue.createCommentVNode(" \u683C\u5F0F\u5316\u65F6\u95F4 "),
              vue.createElementVNode(
                "span",
                vue.mergeProps({ class: "plus-display-item" }, customFieldProps.value),
                vue.toDisplayString(vue.unref(format.formatDate)(displayValue.value)),
                17
                /* TEXT, FULL_PROPS */
              )
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : _ctx.column.valueType === "money" ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 7 },
            [
              vue.createCommentVNode(" \u683C\u5F0F\u5316\u91D1\u94B1 "),
              vue.createElementVNode(
                "span",
                vue.mergeProps({ class: "plus-display-item" }, customFieldProps.value),
                vue.toDisplayString(vue.unref(format.formatMoney)(displayValue.value)),
                17
                /* TEXT, FULL_PROPS */
              )
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : _ctx.column.valueType === "select" || _ctx.column.valueType === "radio" || _ctx.column.valueType === "checkbox" ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 8 },
            [
              vue.createCommentVNode(" \u72B6\u6001\u663E\u793A "),
              vue.createElementVNode(
                "span",
                vue.mergeProps({ class: "plus-display-item plus-display-item__badge" }, customFieldProps.value),
                [
                  getStatus.value.color || getStatus.value.type ? (vue.openBlock(), vue.createElementBlock(
                    "span",
                    {
                      key: 0,
                      class: vue.normalizeClass([
                        "plus-display-item__badge__dot",
                        getStatus.value.type && !getStatus.value.color ? "plus-display-item__badge__dot--" + getStatus.value.type : ""
                      ]),
                      style: vue.normalizeStyle({ backgroundColor: getStatus.value.color })
                    },
                    null,
                    6
                    /* CLASS, STYLE */
                  )) : vue.createCommentVNode("v-if", true),
                  vue.createTextVNode(
                    " " + vue.toDisplayString(getStatus.value.label),
                    1
                    /* TEXT */
                  )
                ],
                16
                /* FULL_PROPS */
              )
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : _ctx.column.valueType === "tag" ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 9 },
            [
              vue.createCommentVNode(" \u6807\u7B7E "),
              vue.createVNode(
                vue.unref(elementPlus.ElTag),
                vue.mergeProps({ class: "plus-display-item" }, customFieldProps.value),
                vue.createSlots({
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      " " + vue.toDisplayString(displayValue.value),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, [
                  vue.renderList(_ctx.column.fieldSlots, (fieldSlot, key) => {
                    return {
                      name: key,
                      fn: vue.withCtx((data) => [
                        (vue.openBlock(), vue.createBlock(
                          vue.resolveDynamicComponent(fieldSlot),
                          vue.normalizeProps(vue.guardReactiveProps(data)),
                          null,
                          16
                          /* FULL_PROPS */
                        ))
                      ])
                    };
                  })
                ]),
                1040
                /* FULL_PROPS, DYNAMIC_SLOTS */
              )
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : _ctx.column.valueType === "progress" ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 10 },
            [
              vue.createCommentVNode(" \u8FDB\u5EA6\u6761 "),
              vue.createVNode(vue.unref(elementPlus.ElProgress), vue.mergeProps({
                class: "plus-display-item",
                percentage: displayValue.value
              }, customFieldProps.value), vue.createSlots({
                _: 2
                /* DYNAMIC */
              }, [
                vue.renderList(_ctx.column.fieldSlots, (fieldSlot, key) => {
                  return {
                    name: key,
                    fn: vue.withCtx((data) => [
                      (vue.openBlock(), vue.createBlock(
                        vue.resolveDynamicComponent(fieldSlot),
                        vue.normalizeProps(vue.guardReactiveProps(data)),
                        null,
                        16
                        /* FULL_PROPS */
                      ))
                    ])
                  };
                })
              ]), 1040, ["percentage"])
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : _ctx.column.valueType === "copy" ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 11 },
            [
              vue.createCommentVNode(" \u590D\u5236 "),
              vue.createElementVNode("span", _hoisted_2, [
                vue.createTextVNode(
                  vue.toDisplayString(displayValue.value) + " ",
                  1
                  /* TEXT */
                ),
                vue.createVNode(
                  vue.unref(elementPlus.ElIcon),
                  vue.mergeProps({
                    size: "16",
                    class: "plus-display-item__icon__copy"
                  }, customFieldProps.value, {
                    onClick: _cache[1] || (_cache[1] = ($event) => handelClickCopy(_ctx.column, subRow.value))
                  }),
                  {
                    default: vue.withCtx(() => [
                      !subRow.value.isCopy ? (vue.openBlock(), vue.createBlock(vue.unref(iconsVue.DocumentCopy), { key: 0 })) : (vue.openBlock(), vue.createBlock(vue.unref(iconsVue.Select), { key: 1 }))
                    ]),
                    _: 1
                    /* STABLE */
                  },
                  16
                  /* FULL_PROPS */
                )
              ])
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : _ctx.column.valueType === "code" ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 12 },
            [
              vue.createCommentVNode(" \u4EE3\u7801\u5757 "),
              vue.createElementVNode(
                "pre",
                vue.mergeProps({ class: "plus-display-item plus-display-item__pre" }, customFieldProps.value),
                "      " + vue.toDisplayString(displayValue.value) + "\n  ",
                17
                /* TEXT, FULL_PROPS */
              )
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          )) : (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 13 },
            [
              vue.createCommentVNode(" \u6CA1\u6709format "),
              vue.createElementVNode(
                "span",
                vue.mergeProps({ class: "plus-display-item" }, customFieldProps.value),
                vue.toDisplayString(displayValue.value),
                17
                /* TEXT, FULL_PROPS */
              )
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          ))
        ],
        2112
        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
      );
    };
  }
});

exports.default = _sfc_main;
