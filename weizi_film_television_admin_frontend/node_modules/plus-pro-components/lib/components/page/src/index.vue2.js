'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var index = require('../../search/index.js');
var index$1 = require('../../table/index.js');
var elementPlus = require('element-plus');
require('../../../hooks/index.js');
var index$2 = require('../../utils/index.js');
require('../../../constants/index.js');
var page = require('../../../constants/page.js');
var useTable = require('../../../hooks/useTable.js');

const _hoisted_1 = { class: "plus-page" };
var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusPage"
  },
  __name: "index",
  props: {
    columns: { type: Array, required: true, default: () => [] },
    request: { type: Function, required: true },
    search: { type: [Boolean, Object], required: false, default: () => ({}) },
    table: { type: Object, required: false, default: () => ({}) },
    params: { type: null, required: false, default: () => ({}) },
    postData: { type: Function, required: false, default: void 0 },
    beforeSearchSubmit: { type: Function, required: false, default: void 0 },
    isCard: { type: Boolean, required: false, default: true },
    searchCardProps: { type: Object, required: false, default: () => ({}) },
    tableCardProps: { type: Object, required: false, default: () => ({}) },
    defaultPageInfo: { type: null, required: false, default: () => ({ ...page.DefaultPageInfo }) },
    defaultPageSizeList: { type: Array, required: false, default: () => page.DefaultPageSizeList },
    pagination: { type: null, required: false, default: () => ({}) }
  },
  emits: ["requestError", "search", "reset", "paginationChange"],
  setup(__props, { expose: __expose, emit }) {
    var _a;
    const props = __props;
    const PlusSearch = index.PlusSearch;
    const PlusTable = index$1.PlusTable;
    const computedDefaultPageInfo = vue.computed(() => props.defaultPageInfo);
    const computedDefaultPageSizeList = vue.computed(() => props.defaultPageSizeList);
    const { tableData, pageInfo, total, loadingStatus } = useTable.useTable(computedDefaultPageInfo);
    const plusSearchInstance = vue.ref();
    const plusTableInstance = vue.ref();
    const state = vue.reactive({
      params: { ...(_a = props.search) == null ? void 0 : _a.defaultValues },
      values: {}
    });
    const slots = vue.useSlots();
    const cellSlots = index$2.filterSlots(slots, index$2.getTableCellSlotName());
    const headerSlots = index$2.filterSlots(slots, index$2.getTableHeaderSlotName());
    const fieldSlots = index$2.filterSlots(slots, index$2.getFieldSlotName());
    const renderWrapper = () => {
      if (props.isCard) {
        return {
          search: vue.h(elementPlus.ElCard, props.searchCardProps),
          table: vue.h(elementPlus.ElCard, props.tableCardProps)
        };
      }
      return { search: vue.h("div"), table: vue.h("div") };
    };
    const getList = async () => {
      if (!props.request)
        return;
      try {
        loadingStatus.value = true;
        const { data, total: dataTotal } = await props.request({
          ...state.params,
          ...pageInfo.value,
          ...props.params
        });
        const list = props.postData && props.postData(data) || data;
        tableData.value = list || [];
        total.value = dataTotal || list.length;
      } catch (error) {
        emit("requestError", error);
      }
      loadingStatus.value = false;
    };
    getList();
    const handlePaginationChange = (_pageInfo) => {
      pageInfo.value = _pageInfo;
      getList();
      emit("paginationChange", _pageInfo);
    };
    const handleSearch = (values) => {
      const data = props.beforeSearchSubmit && props.beforeSearchSubmit(values) || values;
      state.params = data;
      getList();
      emit("search", state.params);
    };
    const handleRest = (values) => {
      state.params = { ...values };
      pageInfo.value.page = 1;
      getList();
      emit("reset", state.params);
    };
    const handleRefresh = () => {
      getList();
    };
    __expose({
      plusSearchInstance,
      plusTableInstance,
      getList,
      handleRest
    });
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock("div", _hoisted_1, [
        _ctx.search ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(renderWrapper().search), { key: 0 }, {
          default: vue.withCtx(() => [
            vue.createVNode(vue.unref(PlusSearch), vue.mergeProps({
              ref_key: "plusSearchInstance",
              ref: plusSearchInstance
            }, _ctx.search, {
              modelValue: state.params,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => state.params = $event),
              columns: _ctx.columns,
              "search-loading": vue.unref(loadingStatus),
              onSearch: handleSearch,
              onReset: handleRest
            }), vue.createSlots({
              _: 2
              /* DYNAMIC */
            }, [
              _ctx.$slots["search-footer"] ? {
                name: "footer",
                fn: vue.withCtx((data) => [
                  vue.renderSlot(_ctx.$slots, "search-footer", vue.normalizeProps(vue.guardReactiveProps(data)))
                ]),
                key: "0"
              } : void 0
            ]), 1040, ["modelValue", "columns", "search-loading"])
          ]),
          _: 3
          /* FORWARDED */
        })) : vue.createCommentVNode("v-if", true),
        (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(renderWrapper().table), { class: "plus-page__table_wrapper" }, {
          default: vue.withCtx(() => [
            vue.createVNode(vue.unref(PlusTable), vue.mergeProps({
              ref_key: "plusTableInstance",
              ref: plusTableInstance,
              "title-bar": { refresh: true }
            }, _ctx.table, {
              "table-data": vue.unref(tableData),
              "loading-status": vue.unref(loadingStatus),
              columns: _ctx.columns,
              pagination: {
                ..._ctx.pagination,
                total: vue.unref(total),
                modelValue: vue.unref(pageInfo),
                pageSizeList: computedDefaultPageSizeList.value
              },
              onPaginationChange: handlePaginationChange,
              onRefresh: handleRefresh
            }), vue.createSlots({
              _: 2
              /* DYNAMIC */
            }, [
              vue.renderList(vue.unref(headerSlots), (_, key) => {
                return {
                  name: key,
                  fn: vue.withCtx((data) => [
                    vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
                  ])
                };
              }),
              vue.renderList(vue.unref(cellSlots), (_, key) => {
                return {
                  name: key,
                  fn: vue.withCtx((data) => [
                    vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
                  ])
                };
              }),
              vue.renderList(vue.unref(fieldSlots), (_, key) => {
                return {
                  name: key,
                  fn: vue.withCtx((data) => [
                    vue.renderSlot(_ctx.$slots, key, vue.normalizeProps(vue.guardReactiveProps(data)))
                  ])
                };
              }),
              _ctx.$slots["table-title"] ? {
                name: "title",
                fn: vue.withCtx(() => [
                  vue.renderSlot(_ctx.$slots, "table-title")
                ]),
                key: "0"
              } : void 0,
              _ctx.$slots["table-toolbar"] ? {
                name: "toolbar",
                fn: vue.withCtx(() => [
                  vue.renderSlot(_ctx.$slots, "table-toolbar")
                ]),
                key: "1"
              } : void 0,
              _ctx.$slots["table-expand"] ? {
                name: "expand",
                fn: vue.withCtx(() => [
                  vue.renderSlot(_ctx.$slots, "table-expand")
                ]),
                key: "2"
              } : void 0,
              _ctx.$slots["table-append"] ? {
                name: "append",
                fn: vue.withCtx(() => [
                  vue.renderSlot(_ctx.$slots, "table-append")
                ]),
                key: "3"
              } : void 0,
              _ctx.$slots["table-empty"] ? {
                name: "empty",
                fn: vue.withCtx(() => [
                  vue.renderSlot(_ctx.$slots, "table-empty")
                ]),
                key: "4"
              } : void 0
            ]), 1040, ["table-data", "loading-status", "columns", "pagination"])
          ]),
          _: 3
          /* FORWARDED */
        }))
      ]);
    };
  }
});

exports.default = _sfc_main;
