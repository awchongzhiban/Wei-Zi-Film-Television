import Page from './src/index.vue';
export type PlusPageInstance = InstanceType<typeof Page>;
export type { PlusPageProps } from './src/index.vue';
export declare const PlusPage: import("vue").DefineComponent<{
    columns: {
        type: ArrayConstructor;
        required: true;
        default: () => never[];
    };
    request: {
        type: FunctionConstructor;
        required: true;
    };
    search: {
        type: (ObjectConstructor | BooleanConstructor)[];
        required: false;
        default: () => {};
    };
    table: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    params: {
        type: null;
        required: false;
        default: () => {};
    };
    postData: {
        type: FunctionConstructor;
        required: false;
        default: undefined;
    };
    beforeSearchSubmit: {
        type: FunctionConstructor;
        required: false;
        default: undefined;
    };
    isCard: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    searchCardProps: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    tableCardProps: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    defaultPageInfo: {
        type: null;
        required: false;
        default: () => {
            page: number;
            pageSize: number;
        };
    };
    defaultPageSizeList: {
        type: ArrayConstructor;
        required: false;
        default: () => number[];
    };
    pagination: {
        type: null;
        required: false;
        default: () => {};
    };
}, {
    props: any;
    emit: (event: "reset" | "search" | "requestError" | "paginationChange", ...args: any[]) => void;
    PlusSearch: import("vue").ComponentOptions<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, any, any, any, any> | {
        new (...args: any[]): any;
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
    };
    PlusTable: import("vue").ComponentOptions<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, any, any, any, any> | {
        new (...args: any[]): any;
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
    };
    computedDefaultPageInfo: import("vue").ComputedRef<any>;
    computedDefaultPageSizeList: import("vue").ComputedRef<any>;
    tableData: import("vue").Ref<any>;
    pageInfo: import("vue").Ref<{
        page: number;
        pageSize: number;
    }>;
    total: import("vue").Ref<number>;
    loadingStatus: import("vue").Ref<boolean>;
    plusSearchInstance: import("vue").Ref<any>;
    plusTableInstance: import("vue").Ref<any>;
    state: import("./src/index.vue").PlusPageState;
    slots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    cellSlots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    headerSlots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    fieldSlots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    renderWrapper: () => {
        search: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        table: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
    };
    getList: () => Promise<void>;
    handlePaginationChange: (_pageInfo: import("../..").PageInfo) => void;
    handleSearch: (values: any) => void;
    handleRest: (values: any) => void;
    handleRefresh: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("reset" | "search" | "requestError" | "paginationChange")[], "reset" | "search" | "requestError" | "paginationChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    columns: {
        type: ArrayConstructor;
        required: true;
        default: () => never[];
    };
    request: {
        type: FunctionConstructor;
        required: true;
    };
    search: {
        type: (ObjectConstructor | BooleanConstructor)[];
        required: false;
        default: () => {};
    };
    table: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    params: {
        type: null;
        required: false;
        default: () => {};
    };
    postData: {
        type: FunctionConstructor;
        required: false;
        default: undefined;
    };
    beforeSearchSubmit: {
        type: FunctionConstructor;
        required: false;
        default: undefined;
    };
    isCard: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    searchCardProps: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    tableCardProps: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    defaultPageInfo: {
        type: null;
        required: false;
        default: () => {
            page: number;
            pageSize: number;
        };
    };
    defaultPageSizeList: {
        type: ArrayConstructor;
        required: false;
        default: () => number[];
    };
    pagination: {
        type: null;
        required: false;
        default: () => {};
    };
}>> & {
    onReset?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
    onRequestError?: ((...args: any[]) => any) | undefined;
    onPaginationChange?: ((...args: any[]) => any) | undefined;
}, {
    search: boolean | Record<string, any>;
    columns: unknown[];
    params: any;
    table: Record<string, any>;
    postData: Function;
    beforeSearchSubmit: Function;
    isCard: boolean;
    searchCardProps: Record<string, any>;
    tableCardProps: Record<string, any>;
    defaultPageInfo: any;
    defaultPageSizeList: unknown[];
    pagination: any;
}, {}>;
