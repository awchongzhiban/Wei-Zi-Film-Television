export type { PlusRenderProps } from './src/index.vue';
export declare const PlusRender: import("vue").DefineComponent<{
    renderType: {
        type: StringConstructor;
        required: false;
        default: undefined;
    };
    callbackValue: {
        type: null;
        required: false;
        default: string;
    };
    customFieldProps: {
        type: null;
        required: false;
        default: () => {};
    };
    render: {
        type: FunctionConstructor;
        required: false;
        skipCheck: boolean;
    };
    params: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    handleChange: {
        type: FunctionConstructor;
        required: false;
    };
}, {
    props: any;
    state: import("vue").Ref<any>;
    renderComponent: () => any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    renderType: {
        type: StringConstructor;
        required: false;
        default: undefined;
    };
    callbackValue: {
        type: null;
        required: false;
        default: string;
    };
    customFieldProps: {
        type: null;
        required: false;
        default: () => {};
    };
    render: {
        type: FunctionConstructor;
        required: false;
        skipCheck: boolean;
    };
    params: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    handleChange: {
        type: FunctionConstructor;
        required: false;
    };
}>>, {
    params: Record<string, any>;
    renderType: string;
    callbackValue: any;
    customFieldProps: any;
}, {}>;
