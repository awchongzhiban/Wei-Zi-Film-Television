'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var index = require('../../utils/index.js');
var iconsVue = require('@element-plus/icons-vue');
require('../../../hooks/index.js');
var index$4 = require('../../radio/index.js');
var index$2 = require('../../date-picker/index.js');
var index$3 = require('../../input-tag/index.js');
var index$1 = require('../../render/index.js');
var elementPlus = require('element-plus');
var useLocale = require('../../../hooks/useLocale.js');
var useGetOptions = require('../../../hooks/useGetOptions.js');
var is = require('../../utils/is.js');

const _hoisted_1 = { class: "plus-form-item__label" };
var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusFormItem"
  },
  __name: "index",
  props: {
    modelValue: { type: null, required: false, default: "" },
    hasLabel: { type: null, required: false, default: true },
    label: { type: null, required: true },
    prop: { type: null, required: true },
    fieldProps: { type: null, required: false, default: () => ({}) },
    valueType: { type: null, required: false },
    options: { type: null, required: false, default: () => [] },
    formItemProps: { type: null, required: false, default: () => ({}) },
    renderField: { type: null, required: false },
    renderLabel: { type: null, required: false },
    tooltip: { type: null, required: false, default: "" },
    fieldSlots: { type: null, required: false, default: () => ({}) },
    index: { type: Number, required: false, default: 0 }
  },
  emits: ["update:modelValue", "change"],
  setup(__props, { expose: __expose, emit }) {
    const props = __props;
    const ElFormItem = elementPlus.ElFormItem;
    const ElTooltip = elementPlus.ElTooltip;
    const ElIcon = elementPlus.ElIcon;
    const ElAutocomplete = elementPlus.ElAutocomplete;
    const ElCascader = elementPlus.ElCascader;
    const ElCheckbox = elementPlus.ElCheckbox;
    const ElCheckboxGroup = elementPlus.ElCheckboxGroup;
    const ElColorPicker = elementPlus.ElColorPicker;
    const ElDatePicker = elementPlus.ElDatePicker;
    const ElInputNumber = elementPlus.ElInputNumber;
    const ElRadioGroup = elementPlus.ElRadioGroup;
    const ElRadio = elementPlus.ElRadio;
    const ElRate = elementPlus.ElRate;
    const ElSelect = elementPlus.ElSelect;
    const ElOption = elementPlus.ElOption;
    const ElSlider = elementPlus.ElSlider;
    const ElSwitch = elementPlus.ElSwitch;
    const ElTimePicker = elementPlus.ElTimePicker;
    const ElTimeSelect = elementPlus.ElTimeSelect;
    const ElInput = elementPlus.ElInput;
    const { t } = useLocale.useLocale();
    const options = useGetOptions.useGetOptions(props);
    const formItemInstance = vue.ref();
    const fieldInstance = vue.ref();
    const customFormItemProps = vue.ref({});
    const customFieldProps = vue.ref({});
    const state = vue.ref();
    const range = ["datetimerange", "daterange", "monthrange"];
    const numberList = ["rate", "input-number", "slider"];
    const arrayList = ["checkbox", "plus-date-picker", "plus-input-tag"];
    const customFieldPropsIsReady = vue.ref(false);
    const isArrayValue = vue.computed(() => {
      var _a, _b, _c, _d;
      if (arrayList.includes(props.valueType)) {
        return true;
      }
      if (props.valueType === "select" && ((_a = customFieldProps.value) == null ? void 0 : _a.multiple) === true) {
        return true;
      }
      if (props.valueType === "date-picker" && range.includes((_b = customFieldProps.value) == null ? void 0 : _b.type)) {
        return true;
      }
      if (props.valueType === "time-picker" && ((_c = customFieldProps.value) == null ? void 0 : _c.isRange) === true) {
        return true;
      }
      if (props.valueType === "cascader" && ((_d = customFieldProps.value) == null ? void 0 : _d.multiple)) {
        return true;
      }
      return false;
    });
    const isNumberValue = vue.computed(() => {
      if (numberList.includes(props.valueType)) {
        return true;
      }
      return false;
    });
    const setValue = (val) => {
      if (isArrayValue.value) {
        if (is.isArray(val)) {
          const [start, end] = val;
          if (is.isDate(start) || is.isDate(end)) {
            state.value = [String(start), String(end)];
          } else {
            state.value = val;
          }
        } else {
          state.value = [];
        }
      } else if (isNumberValue.value) {
        state.value = Number(val);
      } else if (props.valueType === "switch") {
        state.value = Boolean(val);
      } else if (is.isDate(val)) {
        state.value = String(val);
      } else {
        state.value = val;
      }
    };
    vue.watch(
      () => props.formItemProps,
      (val) => {
        index.getCustomProps(val, state.value, props, props.index, "formItemProps").then((data) => {
          customFormItemProps.value = data;
        }).catch((err) => {
          throw err;
        });
      },
      {
        immediate: true,
        deep: true
      }
    );
    vue.watch(
      () => props.fieldProps,
      (val) => {
        index.getCustomProps(val, state.value, props, props.index, "fieldProps").then((data) => {
          customFieldProps.value = data;
          customFieldPropsIsReady.value = true;
        }).catch((err) => {
          throw err;
        });
      },
      {
        immediate: true,
        deep: true
      }
    );
    vue.watch(
      () => props.modelValue,
      (val) => {
        setValue(val);
      },
      {
        flush: "post",
        immediate: true
      }
    );
    const handleChange = (val) => {
      emit("update:modelValue", val);
      emit("change", val);
    };
    const handleSelect = ({ value }) => {
      handleChange(value);
    };
    __expose({
      formItemInstance,
      fieldInstance
    });
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createBlock(vue.unref(ElFormItem), vue.mergeProps({
        ref_key: "formItemInstance",
        ref: formItemInstance,
        label: _ctx.hasLabel ? _ctx.label : "",
        prop: _ctx.prop,
        class: "plus-form-item"
      }, customFormItemProps.value), vue.createSlots({
        default: vue.withCtx(() => [
          _ctx.renderField && vue.unref(is.isFunction)(_ctx.renderField) ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.PlusRender), {
            key: 0,
            render: _ctx.renderField,
            params: props,
            "callback-value": state.value,
            "custom-field-props": customFieldProps.value,
            "render-type": "form",
            "handle-change": handleChange
          }, null, 8, ["render", "callback-value", "custom-field-props"])) : _ctx.$slots[vue.unref(index.getFieldSlotName)(_ctx.prop)] ? vue.renderSlot(_ctx.$slots, vue.unref(index.getFieldSlotName)(_ctx.prop), {
            key: 1,
            prop: _ctx.prop,
            label: _ctx.label,
            fieldProps: customFieldProps.value,
            valueType: _ctx.valueType,
            column: props
          }) : _ctx.valueType === "autocomplete" ? (vue.openBlock(), vue.createBlock(vue.unref(ElAutocomplete), vue.mergeProps({
            key: 2,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => state.value = $event),
            placeholder: vue.unref(t)("plus.field.pleaseEnter") + _ctx.label,
            class: "plus-form-item-field",
            clearable: ""
          }, customFieldProps.value, {
            onChange: handleChange,
            onSelect: handleSelect
          }), vue.createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            vue.renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: vue.withCtx((data) => [
                  (vue.openBlock(), vue.createBlock(
                    vue.resolveDynamicComponent(fieldSlot),
                    vue.normalizeProps(vue.guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder"])) : _ctx.valueType === "cascader" ? (vue.openBlock(), vue.createBlock(vue.unref(ElCascader), vue.mergeProps({
            key: 3,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => state.value = $event),
            placeholder: vue.unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field",
            options: vue.unref(options),
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), vue.createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            vue.renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: vue.withCtx((data) => [
                  (vue.openBlock(), vue.createBlock(
                    vue.resolveDynamicComponent(fieldSlot),
                    vue.normalizeProps(vue.guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder", "options"])) : _ctx.valueType === "checkbox" ? (vue.openBlock(), vue.createBlock(vue.unref(ElCheckboxGroup), vue.mergeProps({
            key: 4,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => state.value = $event),
            placeholder: vue.unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), vue.createSlots({
            default: vue.withCtx(() => [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(vue.unref(options), (item) => {
                  return vue.openBlock(), vue.createBlock(vue.unref(ElCheckbox), vue.mergeProps({
                    key: item.label,
                    label: item.value
                  }, item.fieldItemProps), {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(
                        vue.toDisplayString(item.label),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1040, ["label"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            _: 2
            /* DYNAMIC */
          }, [
            vue.renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: vue.withCtx((data) => [
                  (vue.openBlock(), vue.createBlock(
                    vue.resolveDynamicComponent(fieldSlot),
                    vue.normalizeProps(vue.guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder"])) : _ctx.valueType === "color-picker" ? (vue.openBlock(), vue.createBlock(vue.unref(ElColorPicker), vue.mergeProps({
            key: 5,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => state.value = $event),
            placeholder: vue.unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "placeholder"])) : _ctx.valueType === "date-picker" ? (vue.openBlock(), vue.createBlock(vue.unref(ElDatePicker), vue.mergeProps({
            key: 6,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => state.value = $event),
            placeholder: vue.unref(t)("plus.field.pleaseSelect") + _ctx.label,
            "start-placeholder": vue.unref(t)("plus.datepicker.startPlaceholder"),
            "end-placeholder": vue.unref(t)("plus.datepicker.endPlaceholder"),
            class: "plus-form-item-field",
            format: "YYYY-MM-DD HH:mm:ss",
            type: "datetime",
            "value-format": "YYYY-MM-DD HH:mm:ss",
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), vue.createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            vue.renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: vue.withCtx((data) => [
                  (vue.openBlock(), vue.createBlock(
                    vue.resolveDynamicComponent(fieldSlot),
                    vue.normalizeProps(vue.guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder", "start-placeholder", "end-placeholder"])) : _ctx.valueType === "plus-date-picker" ? (vue.openBlock(), vue.createBlock(vue.unref(index$2.PlusDatePicker), vue.mergeProps({
            key: 7,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => state.value = $event),
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue"])) : _ctx.valueType === "input-number" ? (vue.openBlock(), vue.createBlock(vue.unref(ElInputNumber), vue.mergeProps({
            key: 8,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => state.value = $event),
            class: "plus-form-item-field",
            placeholder: vue.unref(t)("plus.field.pleaseEnter") + _ctx.label,
            autocomplete: "off"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "placeholder"])) : _ctx.valueType === "plus-input-tag" ? (vue.openBlock(), vue.createBlock(vue.unref(index$3.PlusInputTag), vue.mergeProps({
            key: 9,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => state.value = $event),
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue"])) : _ctx.valueType === "radio" ? (vue.openBlock(), vue.createBlock(vue.unref(ElRadioGroup), vue.mergeProps({
            key: 10,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => state.value = $event),
            placeholder: vue.unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field",
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), vue.createSlots({
            default: vue.withCtx(() => [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(vue.unref(options), (item) => {
                  return vue.openBlock(), vue.createBlock(vue.unref(ElRadio), vue.mergeProps({
                    key: item.label,
                    label: item.value
                  }, item.fieldItemProps), {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(
                        vue.toDisplayString(item.label),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1040, ["label"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            _: 2
            /* DYNAMIC */
          }, [
            vue.renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: vue.withCtx((data) => [
                  (vue.openBlock(), vue.createBlock(
                    vue.resolveDynamicComponent(fieldSlot),
                    vue.normalizeProps(vue.guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder"])) : _ctx.valueType === "plus-radio" ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.PlusRadio), vue.mergeProps({
            key: 11,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => state.value = $event),
            class: "plus-form-item-field",
            options: vue.unref(options),
            "is-cancel": ""
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "options"])) : _ctx.valueType === "rate" ? (vue.openBlock(), vue.createBlock(vue.unref(ElRate), vue.mergeProps({
            key: 12,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => state.value = $event),
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue"])) : _ctx.valueType === "select" && customFieldPropsIsReady.value ? (vue.openBlock(), vue.createBlock(vue.unref(ElSelect), vue.mergeProps({
            key: 13,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => state.value = $event),
            placeholder: vue.unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field",
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), vue.createSlots({
            default: vue.withCtx(() => [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(vue.unref(options), (item) => {
                  return vue.openBlock(), vue.createBlock(vue.unref(ElOption), vue.mergeProps({
                    key: item.label,
                    label: item.label,
                    value: item.value
                  }, item.fieldItemProps), null, 16, ["label", "value"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            _: 2
            /* DYNAMIC */
          }, [
            vue.renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: vue.withCtx((data) => [
                  (vue.openBlock(), vue.createBlock(
                    vue.resolveDynamicComponent(fieldSlot),
                    vue.normalizeProps(vue.guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder"])) : _ctx.valueType === "slider" ? (vue.openBlock(), vue.createBlock(vue.unref(ElSlider), vue.mergeProps({
            key: 14,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => state.value = $event),
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue"])) : _ctx.valueType === "switch" ? (vue.openBlock(), vue.createBlock(vue.unref(ElSwitch), vue.mergeProps({
            key: 15,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => state.value = $event),
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), vue.createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            vue.renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: vue.withCtx((data) => [
                  (vue.openBlock(), vue.createBlock(
                    vue.resolveDynamicComponent(fieldSlot),
                    vue.normalizeProps(vue.guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue"])) : _ctx.valueType === "time-picker" ? (vue.openBlock(), vue.createBlock(vue.unref(ElTimePicker), vue.mergeProps({
            key: 16,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => state.value = $event),
            placeholder: vue.unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field",
            clearable: "",
            "value-format": "YYYY-MM-DD HH:mm:ss"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "placeholder"])) : _ctx.valueType === "time-select" ? (vue.openBlock(), vue.createBlock(vue.unref(ElTimeSelect), vue.mergeProps({
            key: 17,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => state.value = $event),
            class: "plus-form-item-field",
            placeholder: vue.unref(t)("plus.field.pleaseSelect") + _ctx.label,
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "placeholder"])) : _ctx.valueType === "textarea" ? (vue.openBlock(), vue.createBlock(vue.unref(ElInput), vue.mergeProps({
            key: 18,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => state.value = $event),
            type: "textarea",
            class: "plus-form-item-field",
            placeholder: vue.unref(t)("plus.field.pleaseEnter") + _ctx.label,
            autocomplete: "off"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "placeholder"])) : _ctx.valueType === "text" ? (vue.openBlock(), vue.createElementBlock(
            "span",
            vue.mergeProps({
              key: 19,
              ref_key: "fieldInstance",
              ref: fieldInstance,
              class: "plus-form-item-field"
            }, customFieldProps.value),
            vue.toDisplayString(state.value),
            17
            /* TEXT, FULL_PROPS */
          )) : (vue.openBlock(), vue.createBlock(vue.unref(ElInput), vue.mergeProps({
            key: 20,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => state.value = $event),
            class: "plus-form-item-field",
            placeholder: vue.unref(t)("plus.field.pleaseEnter") + _ctx.label,
            autocomplete: "off",
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), vue.createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            vue.renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: vue.withCtx((data) => [
                  (vue.openBlock(), vue.createBlock(
                    vue.resolveDynamicComponent(fieldSlot),
                    vue.normalizeProps(vue.guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder"]))
        ]),
        _: 2
        /* DYNAMIC */
      }, [
        _ctx.hasLabel ? {
          name: "label",
          fn: vue.withCtx(({ label: currentLabel }) => [
            vue.createElementVNode("span", _hoisted_1, [
              _ctx.renderLabel && vue.unref(is.isFunction)(_ctx.renderLabel) ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.PlusRender), {
                key: 0,
                render: _ctx.renderLabel,
                params: props,
                "callback-value": currentLabel,
                "custom-field-props": customFieldProps.value
              }, null, 8, ["render", "callback-value", "custom-field-props"])) : vue.renderSlot(_ctx.$slots, vue.unref(index.getLabelSlotName)(_ctx.prop), {
                key: 1,
                prop: _ctx.prop,
                label: _ctx.label,
                fieldProps: customFieldProps.value,
                valueType: _ctx.valueType,
                column: props
              }, () => [
                vue.createTextVNode(
                  vue.toDisplayString(currentLabel),
                  1
                  /* TEXT */
                )
              ]),
              _ctx.tooltip ? (vue.openBlock(), vue.createBlock(
                vue.unref(ElTooltip),
                vue.mergeProps({
                  key: 2,
                  placement: "top"
                }, vue.unref(index.getTooltip)(_ctx.tooltip)),
                {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(ElIcon), {
                      class: "plus-table-column__label__icon",
                      size: 16
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(iconsVue.QuestionFilled))
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                },
                16
                /* FULL_PROPS */
              )) : vue.createCommentVNode("v-if", true)
            ])
          ]),
          key: "0"
        } : void 0
      ]), 1040, ["label", "prop"]);
    };
  }
});

exports.default = _sfc_main;
