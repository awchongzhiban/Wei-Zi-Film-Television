'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var elementPlus = require('element-plus');
require('../../../hooks/index.js');
require('../../utils/index.js');
var useLocale = require('../../../hooks/useLocale.js');
var is = require('../../utils/is.js');

var _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "PlusInputTag"
  },
  __name: "index",
  props: {
    modelValue: { type: Array, required: false, default: () => [] },
    trigger: { type: [Array, String], required: false, default: () => ["blur", "enter", "space"] },
    inputProps: { type: Object, required: false, default: () => ({}) },
    tagProps: { type: Object, required: false, default: () => ({}) },
    limit: { type: Number, required: false, default: Infinity }
  },
  emits: ["update:modelValue", "change"],
  setup(__props, { expose: __expose, emit }) {
    const props = __props;
    const inputInstance = vue.ref();
    const tagInstance = vue.ref();
    const plusInputTagInstance = vue.ref();
    const state = vue.reactive({
      tags: [],
      inputValue: "",
      isFocus: false
    });
    const { t } = useLocale.useLocale();
    vue.watch(
      () => props.modelValue,
      (val) => {
        state.tags = val.slice(0, props.limit);
      },
      { immediate: true }
    );
    const onClickOutside = () => {
      state.isFocus = false;
    };
    const handleClick = () => {
      var _a;
      state.isFocus = true;
      (_a = inputInstance.value) == null ? void 0 : _a.focus();
    };
    const handleClose = (tag) => {
      state.tags = state.tags.filter((item) => item !== tag);
    };
    const handleValue = () => {
      if (state.inputValue.trim() && !state.tags.includes(state.inputValue.trim()) && state.tags.length < props.limit) {
        state.tags.push(state.inputValue.trim());
      }
      state.inputValue = "";
      emit("update:modelValue", state.tags);
      emit("change", state.tags);
    };
    const handle = (type) => {
      const triggerList = is.isArray(props.trigger) ? props.trigger : is.isString(props.trigger) ? [props.trigger] : ["blur", "enter", "space"];
      if (triggerList.includes(type)) {
        handleValue();
      }
    };
    __expose({ inputInstance, tagInstance });
    return (_ctx, _cache) => {
      return vue.withDirectives((vue.openBlock(), vue.createElementBlock(
        "div",
        {
          ref_key: "plusInputTagInstance",
          ref: plusInputTagInstance,
          class: vue.normalizeClass(["plus-input-tag", {
            "is-focus": state.isFocus
          }]),
          onClick: handleClick
        },
        [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList(state.tags, (tag) => {
              return vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElTag), vue.mergeProps({
                ref_for: true,
                ref_key: "tagInstance",
                ref: tagInstance,
                key: tag,
                class: "plus-input-tag__tag"
              }, _ctx.tagProps, {
                closable: "",
                onClose: ($event) => handleClose(tag)
              }), {
                default: vue.withCtx(() => [
                  vue.createTextVNode(
                    vue.toDisplayString(tag),
                    1
                    /* TEXT */
                  )
                ]),
                _: 2
                /* DYNAMIC */
              }, 1040, ["onClose"]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createVNode(vue.unref(elementPlus.ElInput), vue.mergeProps({
            ref_key: "inputInstance",
            ref: inputInstance,
            modelValue: state.inputValue,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => state.inputValue = $event),
            class: "plus-input-tag__input",
            placeholder: vue.unref(t)("plus.inputTag.placeholder"),
            disabled: state.tags.length >= _ctx.limit
          }, _ctx.inputProps, {
            clearable: "",
            onBlur: _cache[1] || (_cache[1] = ($event) => handle("blur")),
            onKeyup: [
              _cache[2] || (_cache[2] = vue.withKeys(vue.withModifiers(($event) => handle("enter"), ["exact"]), ["enter"])),
              _cache[3] || (_cache[3] = vue.withKeys(vue.withModifiers(($event) => handle("space"), ["exact"]), ["space"]))
            ]
          }), null, 16, ["modelValue", "placeholder", "disabled"])
        ],
        2
        /* CLASS */
      )), [
        [vue.unref(elementPlus.ClickOutside), onClickOutside]
      ]);
    };
  }
});

exports.default = _sfc_main;
