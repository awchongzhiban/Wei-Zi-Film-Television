import { defineComponent, ref, reactive, watch, useAttrs, openBlock, createBlock, unref, mergeProps, withCtx, createElementBlock, Fragment, renderList, createTextVNode, toDisplayString } from 'vue';
import { ElRadioGroup, ElRadio } from 'element-plus';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "PlusRadio"
  },
  __name: "index",
  props: {
    modelValue: { type: [String, Number, Boolean], required: false, default: "" },
    options: { type: Array, required: true, default: () => [] },
    isCancel: { type: Boolean, required: false, default: true }
  },
  emits: ["change", "update:modelValue"],
  setup(__props, { expose: __expose, emit }) {
    const props = __props;
    const radioInstance = ref();
    const radioGroupInstance = ref();
    const state = reactive({ radio: "" });
    watch(
      () => props.modelValue,
      (val) => {
        state.radio = val;
      },
      { immediate: true }
    );
    const attrs = useAttrs();
    const radioClick = (e, val, fieldItemProps) => {
      if (Reflect.has(attrs, "disabled") || (fieldItemProps == null ? void 0 : fieldItemProps.disabled)) {
        return;
      }
      if (!props.isCancel) {
        return;
      } else {
        e.preventDefault();
      }
      state.radio === val ? state.radio = "" : state.radio = val;
      emit("update:modelValue", state.radio);
      emit("change", state.radio);
    };
    const change = (val) => {
      if (props.isCancel)
        return;
      emit("update:modelValue", val);
      emit("change", val);
    };
    __expose({
      radioInstance,
      radioGroupInstance
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElRadioGroup), mergeProps({
        ref_key: "radioGroupInstance",
        ref: radioGroupInstance,
        modelValue: state.radio,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => state.radio = $event)
      }, _ctx.$attrs), {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.options, (item) => {
              return openBlock(), createBlock(unref(ElRadio), mergeProps({
                key: item.value,
                ref_for: true,
                ref_key: "radioInstance",
                ref: radioInstance,
                label: item.value
              }, item.fieldItemProps, {
                onClick: ($event) => radioClick($event, item.value, item.fieldItemProps),
                onChange: ($event) => change(item.value)
              }), {
                default: withCtx(() => [
                  createTextVNode(
                    toDisplayString(item.label),
                    1
                    /* TEXT */
                  )
                ]),
                _: 2
                /* DYNAMIC */
              }, 1040, ["label", "onClick", "onChange"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 1
        /* STABLE */
      }, 16, ["modelValue"]);
    };
  }
});

export { _sfc_main as default };
