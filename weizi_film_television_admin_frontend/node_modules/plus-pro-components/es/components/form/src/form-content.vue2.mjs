import { defineComponent, reactive, unref, watch, openBlock, createBlock, normalizeProps, guardReactiveProps, withCtx, createElementBlock, Fragment, renderList, mergeProps, createVNode, createSlots, renderSlot, createCommentVNode, resolveDynamicComponent } from 'vue';
import { ElRow, ElCol } from 'element-plus';
import { PlusFormItem } from '../../form-item/index.mjs';
import { getLabelSlotName, getFieldSlotName, getExtraSlotName } from '../../utils/index.mjs';
import { isFunction } from '../../utils/is.mjs';

const _hoisted_1 = {
  key: 0,
  class: "plus-form-item-extra"
};
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "PlusFormContent"
  },
  __name: "form-content",
  props: {
    modelValue: { type: null, required: false, default: () => ({}) },
    hasLabel: { type: Boolean, required: false, default: true },
    columns: { type: Array, required: false, default: () => [] },
    rowProps: { type: Object, required: false, default: () => ({}) },
    colProps: { type: Object, required: false, default: () => ({}) }
  },
  emits: ["update:modelValue", "change"],
  setup(__props, { emit }) {
    const props = __props;
    const state = reactive({ values: {} });
    const getHasLabel = (hasLabel) => {
      const has = unref(hasLabel);
      if (typeof has === "boolean") {
        return has;
      }
      return props.hasLabel;
    };
    watch(
      () => props.modelValue,
      (val) => {
        state.values = val;
      },
      {
        immediate: true
      }
    );
    const handleChange = (value, column) => {
      emit("change", state.values, column);
      emit("update:modelValue", state.values);
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(
        unref(ElRow),
        normalizeProps(guardReactiveProps(_ctx.rowProps)),
        {
          default: withCtx(() => [
            (openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(_ctx.columns, (item) => {
                return openBlock(), createBlock(
                  unref(ElCol),
                  mergeProps({
                    key: item.prop
                  }, item.colProps || _ctx.colProps),
                  {
                    default: withCtx(() => [
                      createVNode(unref(PlusFormItem), mergeProps({
                        modelValue: state.values[item.prop],
                        "onUpdate:modelValue": ($event) => state.values[item.prop] = $event
                      }, item, {
                        "has-label": getHasLabel(item.hasLabel),
                        "label-width": getHasLabel(item.hasLabel) ? item.labelWidth : "0px",
                        onChange: (value) => handleChange(value, item)
                      }), createSlots({
                        _: 2
                        /* DYNAMIC */
                      }, [
                        _ctx.$slots[unref(getLabelSlotName)(item.prop)] ? {
                          name: unref(getLabelSlotName)(item.prop),
                          fn: withCtx((data) => [
                            renderSlot(_ctx.$slots, unref(getLabelSlotName)(item.prop), normalizeProps(guardReactiveProps(data)))
                          ]),
                          key: "0"
                        } : void 0,
                        _ctx.$slots[unref(getFieldSlotName)(item.prop)] ? {
                          name: unref(getFieldSlotName)(item.prop),
                          fn: withCtx((data) => [
                            renderSlot(_ctx.$slots, unref(getFieldSlotName)(item.prop), normalizeProps(guardReactiveProps(data)))
                          ]),
                          key: "1"
                        } : void 0
                      ]), 1040, ["modelValue", "onUpdate:modelValue", "has-label", "label-width", "onChange"]),
                      createCommentVNode(" el-form-item \u4E0B\u4E00\u884C\u989D\u5916\u7684\u5185\u5BB9 "),
                      item.renderExtra || _ctx.$slots[unref(getExtraSlotName)(item.prop)] ? (openBlock(), createElementBlock("div", _hoisted_1, [
                        item.renderExtra && unref(isFunction)(item.renderExtra) ? (openBlock(), createBlock(
                          resolveDynamicComponent(item.renderExtra),
                          normalizeProps(mergeProps({ key: 0 }, item)),
                          null,
                          16
                          /* FULL_PROPS */
                        )) : _ctx.$slots[unref(getExtraSlotName)(item.prop)] ? renderSlot(_ctx.$slots, unref(getExtraSlotName)(item.prop), normalizeProps(mergeProps({ key: 1 }, item))) : createCommentVNode("v-if", true)
                      ])) : createCommentVNode("v-if", true)
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1040
                  /* FULL_PROPS, DYNAMIC_SLOTS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            )),
            createCommentVNode(" \u641C\u7D22\u7684footer\u63D2\u69FD  "),
            _ctx.$slots["search-footer"] ? (openBlock(), createBlock(
              unref(ElCol),
              normalizeProps(mergeProps({ key: 0 }, _ctx.colProps)),
              {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "search-footer")
                ]),
                _: 3
                /* FORWARDED */
              },
              16
              /* FULL_PROPS */
            )) : createCommentVNode("v-if", true)
          ]),
          _: 3
          /* FORWARDED */
        },
        16
        /* FULL_PROPS */
      );
    };
  }
});

export { _sfc_main as default };
