import { defineComponent, computed, unref, openBlock, createBlock, mergeProps, withCtx, renderSlot, createElementBlock, Fragment, renderList, resolveDynamicComponent, createCommentVNode, createTextVNode, toDisplayString, createVNode } from 'vue';
import { ElDescriptions, ElDescriptionsItem } from 'element-plus';
import { PlusDisplayItem } from '../../display-item/index.mjs';
import { getValue, getDescLabelSlotName, getDescSlotName } from '../../utils/index.mjs';
import { isFunction } from '../../utils/is.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "PlusDescriptions"
  },
  __name: "index",
  props: {
    data: { type: null, required: true, default: () => ({}) },
    columns: { type: Array, required: false, default: () => [] },
    column: { type: Number, required: false, default: 3 },
    title: { type: String, required: false, default: "" }
  },
  setup(__props) {
    const props = __props;
    const subColumns = computed(
      () => props.columns.filter((item) => unref(item.hideInDescriptions) !== true)
    );
    const getDisplayValue = (prop) => getValue(props.data, prop);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElDescriptions), mergeProps({
        title: _ctx.title,
        column: _ctx.column,
        class: "plus-description",
        border: ""
      }, _ctx.$attrs), {
        title: withCtx(() => [
          renderSlot(_ctx.$slots, "title")
        ]),
        extra: withCtx(() => [
          renderSlot(_ctx.$slots, "extra")
        ]),
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default", {}, () => [
            (openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(subColumns.value, (item) => {
                var _a, _b;
                return openBlock(), createBlock(unref(ElDescriptionsItem), mergeProps({
                  key: item.label,
                  label: item.label,
                  "class-name": (((_a = item.descriptionsItemProps) == null ? void 0 : _a.className) || "") + " plus-description__name",
                  "label-class-name": (((_b = item.descriptionsItemProps) == null ? void 0 : _b.labelClassName) || "") + " plus-description__label"
                }, item.descriptionsItemProps), {
                  label: withCtx(() => [
                    item.renderDescriptionsLabel && unref(isFunction)(item.renderDescriptionsLabel) ? (openBlock(), createBlock(resolveDynamicComponent(item.renderDescriptionsLabel), {
                      key: 0,
                      label: item.label,
                      column: item,
                      row: _ctx.data
                    }, null, 8, ["label", "column", "row"])) : _ctx.$slots[unref(getDescLabelSlotName)(item.prop)] ? (openBlock(), createElementBlock(
                      Fragment,
                      { key: 1 },
                      [
                        createCommentVNode(" plus-desc-label-* "),
                        renderSlot(_ctx.$slots, unref(getDescLabelSlotName)(item.prop), {
                          column: item,
                          row: _ctx.data,
                          label: item.label
                        })
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : (openBlock(), createElementBlock(
                      Fragment,
                      { key: 2 },
                      [
                        createCommentVNode(" normal "),
                        createTextVNode(
                          toDisplayString(item.label),
                          1
                          /* TEXT */
                        )
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    ))
                  ]),
                  default: withCtx(() => [
                    item.renderDescriptionsItem && unref(isFunction)(item.renderDescriptionsItem) ? (openBlock(), createBlock(resolveDynamicComponent(item.renderDescriptionsItem), {
                      key: 0,
                      value: getDisplayValue(item.prop),
                      column: item,
                      row: _ctx.data
                    }, null, 8, ["value", "column", "row"])) : _ctx.$slots[unref(getDescSlotName)(item.prop)] ? (openBlock(), createElementBlock(
                      Fragment,
                      { key: 1 },
                      [
                        createCommentVNode(" plus-desc-* "),
                        renderSlot(_ctx.$slots, unref(getDescSlotName)(item.prop), {
                          column: item,
                          row: _ctx.data,
                          value: getDisplayValue(item.prop)
                        })
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : (openBlock(), createElementBlock(
                      Fragment,
                      { key: 2 },
                      [
                        createCommentVNode(" normal "),
                        createVNode(unref(PlusDisplayItem), {
                          column: item,
                          row: _ctx.data
                        }, null, 8, ["column", "row"])
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    ))
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1040, ["label", "class-name", "label-class-name"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ]),
        _: 3
        /* FORWARDED */
      }, 16, ["title", "column"]);
    };
  }
});

export { _sfc_main as default };
