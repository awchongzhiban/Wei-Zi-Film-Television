import { defineComponent, unref, h, openBlock, createBlock, mergeProps, withCtx, createCommentVNode, createElementBlock, Fragment, renderList, resolveDynamicComponent, createVNode, createElementVNode, createTextVNode, toDisplayString } from 'vue';
import { ArrowDownBold } from '@element-plus/icons-vue';
import { ElTooltip, ElIcon, ElButton, ElLink, ElMessageBox, ElTableColumn, ElDropdown, ElDropdownMenu, ElDropdownItem } from 'element-plus';
import '../../utils/index.mjs';
import '../../../hooks/index.mjs';
import { useLocale } from '../../../hooks/useLocale.mjs';
import { isFunction, isPlainObject } from '../../utils/is.mjs';

const _hoisted_1 = { class: "plus-table-action-bar__dropdown__link" };
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "PlusTableActionBar"
  },
  __name: "table-action-bar",
  props: {
    label: { type: String, required: false, default: "" },
    fixed: { type: String, required: false, default: "right" },
    showNumber: { type: Number, required: false, default: 3 },
    type: { type: String, required: false, default: "link" },
    buttons: { type: Array, required: false, default: () => [] },
    width: { type: [String, Number], required: false, default: 200 },
    actionBarTableColumnProps: { type: Object, required: false, default: () => ({}) }
  },
  emits: ["clickAction", "clickActionConfirmCancel"],
  setup(__props, { emit }) {
    const props = __props;
    const { t } = useLocale();
    const getSubButtons = (row, index) => {
      const data = props.buttons.filter((item) => {
        if (isFunction(item.show)) {
          const tempFunction = item.show;
          const isShow = tempFunction(row, index, item);
          return unref(isShow) !== false;
        }
        return unref(item.show) !== false;
      });
      const preButtons = data.slice(0, props.showNumber);
      const nextButtons = data.slice(props.showNumber);
      const showMore = data.length > props.showNumber;
      return {
        showMore,
        preButtons,
        nextButtons
      };
    };
    const render = (row, buttonRow, index) => {
      if (props.type === "icon") {
        return h(
          ElTooltip,
          { placement: "top", content: unref(buttonRow.text), ...buttonRow.tooltipProps },
          () => h(
            ElIcon,
            {
              size: 16,
              ...buttonRow.props,
              onClick: (event) => handleClickAction(row, buttonRow, index, event)
            },
            () => buttonRow.icon ? h(buttonRow.icon) : ""
          )
        );
      } else {
        const Tag = props.type === "button" ? ElButton : ElLink;
        const defaultProps = props.type === "link" ? { href: "javaScript:;" } : {};
        return h(
          Tag,
          {
            size: "small",
            ...defaultProps,
            ...buttonRow.props,
            onClick: (event) => handleClickAction(row, buttonRow, index, event)
          },
          () => unref(buttonRow.text)
        );
      }
    };
    const handleClickAction = (row, buttonRow, index, e) => {
      var _a, _b;
      const data = { row, buttonRow, index, e };
      if (buttonRow.confirm) {
        const message = t("plus.table.confirmToPerformThisOperation");
        let title = t("plus.table.prompt");
        let options = void 0;
        let appContext = null;
        if (isPlainObject(buttonRow.confirm) && typeof buttonRow.confirm !== "boolean") {
          const tempTitle = isFunction(buttonRow.confirm.title) ? buttonRow.confirm.title(data) : buttonRow.confirm.title;
          if (tempTitle) {
            title = tempTitle;
          }
          const tempMessage = isFunction(buttonRow.confirm.message) ? buttonRow.confirm.message(data) : buttonRow.confirm.message;
          if (tempMessage) {
            title = tempMessage;
          }
          options = (_a = buttonRow.confirm) == null ? void 0 : _a.options;
          appContext = (_b = buttonRow.confirm) == null ? void 0 : _b.appContext;
        }
        ElMessageBox.confirm(message, title, options, appContext).then(() => {
          emit("clickAction", data);
        }).catch(() => {
          emit("clickActionConfirmCancel", data);
        });
      } else {
        emit("clickAction", data);
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElTableColumn), mergeProps({
        key: "actionBar",
        "class-name": "plus-table-action-bar",
        align: "center",
        label: _ctx.label || unref(t)("plus.table.action"),
        fixed: _ctx.fixed || "right",
        width: _ctx.width || 200
      }, props.actionBarTableColumnProps), {
        default: withCtx(({ row, $index }) => [
          createCommentVNode(" \u663E\u793A\u51FA\u6765\u7684\u6309\u94AE "),
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(getSubButtons(row, $index).preButtons, (buttonRow) => {
              return openBlock(), createBlock(resolveDynamicComponent(() => render(row, buttonRow, $index)), {
                key: buttonRow.text
              });
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          createCommentVNode(" \u9690\u85CF\u7684\u6309\u94AE "),
          getSubButtons(row, $index).showMore ? (openBlock(), createBlock(
            unref(ElDropdown),
            {
              key: 0,
              trigger: "click",
              class: "plus-table-action-bar__dropdown"
            },
            {
              dropdown: withCtx(() => [
                createVNode(
                  unref(ElDropdownMenu),
                  null,
                  {
                    default: withCtx(() => [
                      (openBlock(true), createElementBlock(
                        Fragment,
                        null,
                        renderList(getSubButtons(row, $index).nextButtons, (buttonRow) => {
                          return openBlock(), createBlock(
                            unref(ElDropdownItem),
                            {
                              key: unref(buttonRow.text)
                            },
                            {
                              default: withCtx(() => [
                                (openBlock(), createBlock(resolveDynamicComponent(() => render(row, buttonRow, $index))))
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          );
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                )
              ]),
              default: withCtx(() => [
                createElementVNode("span", _hoisted_1, [
                  createTextVNode(
                    toDisplayString(unref(t)("plus.table.more")) + " ",
                    1
                    /* TEXT */
                  ),
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(ArrowDownBold))
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ])
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          )) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      }, 16, ["label", "fixed", "width"]);
    };
  }
});

export { _sfc_main as default };
