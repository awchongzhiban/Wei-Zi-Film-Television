import { defineComponent, ref, shallowRef, reactive, useSlots, provide, watch, unref, toRefs, openBlock, createElementBlock, createBlock, withCtx, renderSlot, createCommentVNode, withDirectives, mergeProps, createElementVNode, createVNode, createSlots, renderList, normalizeProps, guardReactiveProps, isRef } from 'vue';
import { PlusPagination } from '../../pagination/index.mjs';
import '../../../constants/index.mjs';
import { ElTable, ElTableColumn, vLoading } from 'element-plus';
import { filterSlots, getTableCellSlotName, getTableHeaderSlotName, getFieldSlotName, getExtraSlotName } from '../../utils/index.mjs';
import PlusTableActionBarComponent from './table-action-bar.vue.mjs';
import PlusTableColumnComponent from './table-column.vue.mjs';
import PlusTableTableColumnIndex from './table-column-index.vue.mjs';
import PlusTableColumnDragSort from './table-column-drag-sort.vue.mjs';
import PlusTableTitleBar from './table-title-bar.vue.mjs';
import { DefaultPageInfo } from '../../../constants/page.mjs';
import { TableFormRefInjectionKey } from '../../../constants/form.mjs';

const _hoisted_1 = { class: "plus-table" };
const _hoisted_2 = { class: "plus-table-expand-col" };
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "PlusTable",
    inheritAttrs: false
  },
  __name: "index",
  props: {
    defaultSize: { type: null, required: false, default: "default" },
    pagination: { type: [Boolean, Object], required: false, default: false },
    actionBar: { type: [Boolean, Object], required: false, default: false },
    hasIndexColumn: { type: Boolean, required: false, default: false },
    titleBar: { type: [Boolean, Object], required: false, default: true },
    isSelection: { type: Boolean, required: false, default: false },
    hasExpand: { type: Boolean, required: false, default: false },
    loadingStatus: { type: Boolean, required: false, default: false },
    height: { type: String, required: false },
    tableData: { type: Array, required: true, default: () => [] },
    columns: { type: Array, required: true, default: () => [] },
    headerCellStyle: { type: Object, required: false, default: () => ({}) },
    rowKey: { type: String, required: false, default: "id" },
    dragSortable: { type: [Boolean, Object], required: false, default: false },
    dragSortableTableColumnProps: { type: null, required: false, default: () => ({}) },
    indexTableColumnProps: { type: null, required: false, default: () => ({}) },
    selectionTableColumnProps: { type: null, required: false, default: () => ({
      width: 40
    }) },
    expandTableColumnProps: { type: null, required: false, default: () => ({}) },
    indexContentStyle: { type: [Object, Function], required: false, default: () => ({}) }
  },
  emits: ["paginationChange", "clickAction", "clickActionConfirmCancel", "dragSortEnd", "formChange", "refresh"],
  setup(__props, { expose: __expose, emit }) {
    var _a;
    const props = __props;
    const PlusTableActionBar = PlusTableActionBarComponent;
    const PlusTableColumn = PlusTableColumnComponent;
    const subColumns = ref([]);
    const tableInstance = shallowRef(null);
    const state = reactive({
      subPageInfo: {
        ...((_a = props.pagination) == null ? void 0 : _a.modelValue) || DefaultPageInfo
      },
      size: props.defaultSize
    });
    const slots = useSlots();
    const cellSlots = filterSlots(slots, getTableCellSlotName());
    const headerSlots = filterSlots(slots, getTableHeaderSlotName());
    const fieldSlots = filterSlots(slots, getFieldSlotName());
    const extraSlots = filterSlots(slots, getExtraSlotName());
    const formRefs = shallowRef({});
    provide(TableFormRefInjectionKey, formRefs);
    watch(
      () => props.columns,
      (val) => {
        subColumns.value = val.filter((item) => unref(item.hideInTable) !== true);
      },
      {
        deep: true,
        immediate: true
      }
    );
    const handlePaginationChange = () => {
      emit("paginationChange", { ...state.subPageInfo });
    };
    const handleAction = (res) => {
      const { row, buttonRow, index, e } = res;
      emit("clickAction", { row, buttonRow, index, e, formRefs: formRefs.value[index] });
    };
    const handleClickActionConfirmCancel = (res) => {
      const { row, buttonRow, index, e } = res;
      emit("clickActionConfirmCancel", {
        row,
        buttonRow,
        index,
        e,
        formRefs: formRefs.value[index]
      });
    };
    const handleFilterTableConfirm = (data) => {
      subColumns.value = data.filter((item) => unref(item.hideInTable) !== true);
    };
    const handleClickDensity = (data) => {
      state.size = data;
    };
    const handleDragSortEnd = (newIndex, oldIndex) => {
      emit("dragSortEnd", newIndex, oldIndex);
    };
    const handleRefresh = () => {
      emit("refresh");
    };
    const handleFormChange = (data) => {
      emit("formChange", data);
    };
    const { subPageInfo, size } = toRefs(state);
    __expose({
      formRefs,
      tableInstance
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        _ctx.titleBar ? (openBlock(), createBlock(PlusTableTitleBar, {
          key: 0,
          columns: _ctx.columns,
          "default-size": unref(size),
          "title-bar": _ctx.titleBar,
          "change-columns": subColumns.value,
          onClickDensity: handleClickDensity,
          onFilterTable: handleFilterTableConfirm,
          onRefresh: handleRefresh
        }, {
          title: withCtx(() => [
            renderSlot(_ctx.$slots, "title")
          ]),
          toolbar: withCtx(() => [
            renderSlot(_ctx.$slots, "toolbar")
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["columns", "default-size", "title-bar", "change-columns"])) : createCommentVNode("v-if", true),
        withDirectives((openBlock(), createBlock(unref(ElTable), mergeProps({
          ref_key: "tableInstance",
          ref: tableInstance,
          "reserve-selection": true,
          data: _ctx.tableData,
          border: true,
          height: _ctx.height,
          "header-cell-style": _ctx.headerCellStyle,
          size: unref(size),
          "row-key": _ctx.rowKey,
          "highlight-current-row": "",
          "scrollbar-always-on": ""
        }, _ctx.$attrs), {
          append: withCtx(() => [
            renderSlot(_ctx.$slots, "append")
          ]),
          empty: withCtx(() => [
            renderSlot(_ctx.$slots, "empty")
          ]),
          default: withCtx(() => {
            var _a2;
            return [
              _ctx.isSelection ? (openBlock(), createBlock(
                unref(ElTableColumn),
                mergeProps({
                  key: "selection",
                  type: "selection"
                }, _ctx.selectionTableColumnProps),
                null,
                16
                /* FULL_PROPS */
              )) : createCommentVNode("v-if", true),
              _ctx.hasIndexColumn ? (openBlock(), createBlock(PlusTableTableColumnIndex, {
                key: 1,
                "index-content-style": _ctx.indexContentStyle,
                "index-table-column-props": _ctx.indexTableColumnProps,
                "page-info": (_a2 = _ctx.pagination) == null ? void 0 : _a2.modelValue
              }, null, 8, ["index-content-style", "index-table-column-props", "page-info"])) : createCommentVNode("v-if", true),
              _ctx.dragSortable ? (openBlock(), createBlock(PlusTableColumnDragSort, {
                key: 2,
                sortable: _ctx.dragSortable,
                "drag-sortable-table-column-props": _ctx.dragSortableTableColumnProps,
                "table-instance": tableInstance.value,
                onDragSortEnd: handleDragSortEnd
              }, null, 8, ["sortable", "drag-sortable-table-column-props", "table-instance"])) : createCommentVNode("v-if", true),
              _ctx.hasExpand ? (openBlock(), createBlock(
                unref(ElTableColumn),
                mergeProps({
                  key: 3,
                  type: "expand"
                }, _ctx.expandTableColumnProps),
                {
                  default: withCtx(({ row, $index }) => [
                    createElementVNode("div", _hoisted_2, [
                      renderSlot(_ctx.$slots, "expand", {
                        row,
                        index: $index
                      })
                    ])
                  ]),
                  _: 3
                  /* FORWARDED */
                },
                16
                /* FULL_PROPS */
              )) : createCommentVNode("v-if", true),
              createVNode(unref(PlusTableColumn), {
                columns: subColumns.value,
                onFormChange: handleFormChange
              }, createSlots({
                _: 2
                /* DYNAMIC */
              }, [
                renderList(unref(headerSlots), (_, key) => {
                  return {
                    name: key,
                    fn: withCtx((data) => [
                      renderSlot(_ctx.$slots, key, normalizeProps(guardReactiveProps(data)))
                    ])
                  };
                }),
                renderList(unref(cellSlots), (_, key) => {
                  return {
                    name: key,
                    fn: withCtx((data) => [
                      renderSlot(_ctx.$slots, key, normalizeProps(guardReactiveProps(data)))
                    ])
                  };
                }),
                renderList(unref(fieldSlots), (_, key) => {
                  return {
                    name: key,
                    fn: withCtx((data) => [
                      renderSlot(_ctx.$slots, key, normalizeProps(guardReactiveProps(data)))
                    ])
                  };
                }),
                renderList(unref(extraSlots), (_, key) => {
                  return {
                    name: key,
                    fn: withCtx((data) => [
                      renderSlot(_ctx.$slots, key, normalizeProps(guardReactiveProps(data)))
                    ])
                  };
                })
              ]), 1032, ["columns"]),
              _ctx.actionBar ? (openBlock(), createBlock(
                unref(PlusTableActionBar),
                mergeProps({ key: 4 }, _ctx.actionBar, {
                  onClickAction: handleAction,
                  onClickActionConfirmCancel: handleClickActionConfirmCancel
                }),
                null,
                16
                /* FULL_PROPS */
              )) : createCommentVNode("v-if", true)
            ];
          }),
          _: 3
          /* FORWARDED */
        }, 16, ["data", "height", "header-cell-style", "size", "row-key"])), [
          [unref(vLoading), _ctx.loadingStatus]
        ]),
        createCommentVNode(" \u5206\u9875 "),
        _ctx.pagination ? (openBlock(), createBlock(unref(PlusPagination), mergeProps({
          key: 1,
          modelValue: unref(subPageInfo),
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(subPageInfo) ? subPageInfo.value = $event : null)
        }, _ctx.pagination, { onChange: handlePaginationChange }), createSlots({
          _: 2
          /* DYNAMIC */
        }, [
          _ctx.$slots["pagination-left"] ? {
            name: "pagination-left",
            fn: withCtx(() => [
              renderSlot(_ctx.$slots, "pagination-left")
            ]),
            key: "0"
          } : void 0,
          _ctx.$slots["pagination-right"] ? {
            name: "pagination-right",
            fn: withCtx(() => [
              renderSlot(_ctx.$slots, "pagination-right")
            ]),
            key: "1"
          } : void 0
        ]), 1040, ["modelValue"])) : createCommentVNode("v-if", true)
      ]);
    };
  }
});

export { _sfc_main as default };
