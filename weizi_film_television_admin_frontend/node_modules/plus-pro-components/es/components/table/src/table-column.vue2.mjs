import { defineComponent, shallowRef, inject, watch, openBlock, createElementBlock, Fragment, renderList, createBlock, unref, mergeProps, withCtx, createElementVNode, createCommentVNode, renderSlot, createTextVNode, toDisplayString, createVNode, createSlots, normalizeProps, guardReactiveProps } from 'vue';
import { PlusDisplayItem } from '../../display-item/index.mjs';
import { getTableKey, getTableHeaderSlotName, getTooltip, getFieldSlotName, getExtraSlotName, getTableCellSlotName } from '../../utils/index.mjs';
import '../../../constants/index.mjs';
import { QuestionFilled } from '@element-plus/icons-vue';
import { PlusRender } from '../../render/index.mjs';
import { ElTableColumn, ElTooltip, ElIcon } from 'element-plus';
import { TableFormRefInjectionKey } from '../../../constants/form.mjs';
import { isFunction } from '../../utils/is.mjs';

const _hoisted_1 = { class: "plus-table-column__header" };
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "PlusTableTableColumn"
  },
  __name: "table-column",
  props: {
    columns: { type: Array, required: false, default: () => [] }
  },
  emits: ["formChange"],
  setup(__props, { expose: __expose, emit }) {
    const plusDisplayItemInstance = shallowRef();
    const formRef = inject(TableFormRefInjectionKey);
    watch(plusDisplayItemInstance, (event) => {
      const data = {};
      const list = (event == null ? void 0 : event.map((item) => ({ ...item, ...item == null ? void 0 : item.getDisplayItemInstance() }))) || [];
      list.forEach((item) => {
        if (!data[item.index]) {
          data[item.index] = [];
        }
        data[item.index].push(item);
      });
      formRef.value = data;
    });
    const getKey = (item) => getTableKey(item, true);
    const handleChange = (data, index, column, item) => {
      emit("formChange", { ...data, index, column: { ...column, ...item } });
    };
    __expose({
      plusDisplayItemInstance
    });
    return (_ctx, _cache) => {
      return openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.columns, (item) => {
          return openBlock(), createBlock(unref(ElTableColumn), mergeProps({
            key: getKey(item),
            "class-name": "plus-table-column"
          }, item.tableColumnProps, {
            prop: item.prop,
            width: item.width,
            "min-width": item.minWidth
          }), {
            header: withCtx(() => [
              createElementVNode("span", _hoisted_1, [
                item.renderHeader && unref(isFunction)(item.renderHeader) ? (openBlock(), createBlock(unref(PlusRender), {
                  key: 0,
                  render: item.renderHeader,
                  params: item,
                  "callback-value": item.label
                }, null, 8, ["render", "params", "callback-value"])) : (openBlock(), createElementBlock(
                  Fragment,
                  { key: 1 },
                  [
                    createCommentVNode("\u8868\u683C\u5355\u5143\u683CHeader\u7684\u63D2\u69FD "),
                    renderSlot(_ctx.$slots, unref(getTableHeaderSlotName)(item.prop), {
                      prop: item.prop,
                      label: item.label,
                      fieldProps: item.fieldProps,
                      valueType: item.valueType,
                      column: item
                    }, () => [
                      createTextVNode(
                        toDisplayString(item.label),
                        1
                        /* TEXT */
                      )
                    ])
                  ],
                  2112
                  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                )),
                item.tooltip ? (openBlock(), createBlock(
                  unref(ElTooltip),
                  mergeProps({
                    key: 2,
                    placement: "top"
                  }, unref(getTooltip)(item.tooltip)),
                  {
                    default: withCtx(() => [
                      createVNode(unref(ElIcon), {
                        class: "plus-table-column__header__icon",
                        size: 16
                      }, {
                        default: withCtx(() => [
                          createVNode(unref(QuestionFilled))
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1040
                  /* FULL_PROPS, DYNAMIC_SLOTS */
                )) : createCommentVNode("v-if", true)
              ])
            ]),
            default: withCtx(({ row, column, $index }) => [
              createVNode(unref(PlusDisplayItem), {
                ref_for: true,
                ref_key: "plusDisplayItemInstance",
                ref: plusDisplayItemInstance,
                column: item,
                row,
                index: $index,
                onChange: (data) => handleChange(data, $index, column, item)
              }, createSlots({
                _: 2
                /* DYNAMIC */
              }, [
                _ctx.$slots[unref(getFieldSlotName)(item.prop)] ? {
                  name: unref(getFieldSlotName)(item.prop),
                  fn: withCtx((data) => [
                    renderSlot(_ctx.$slots, unref(getFieldSlotName)(item.prop), normalizeProps(guardReactiveProps(data)))
                  ]),
                  key: "0"
                } : void 0,
                _ctx.$slots[unref(getExtraSlotName)(item.prop)] ? {
                  name: unref(getExtraSlotName)(item.prop),
                  fn: withCtx((data) => [
                    renderSlot(_ctx.$slots, unref(getExtraSlotName)(item.prop), normalizeProps(guardReactiveProps(data)))
                  ]),
                  key: "1"
                } : void 0,
                _ctx.$slots[unref(getTableCellSlotName)(item.prop)] ? {
                  name: unref(getTableCellSlotName)(item.prop),
                  fn: withCtx((data) => [
                    renderSlot(_ctx.$slots, unref(getTableCellSlotName)(item.prop), normalizeProps(guardReactiveProps(data)))
                  ]),
                  key: "2"
                } : void 0
              ]), 1032, ["column", "row", "index", "onChange"])
            ]),
            _: 2
            /* DYNAMIC */
          }, 1040, ["prop", "width", "min-width"]);
        }),
        128
        /* KEYED_FRAGMENT */
      );
    };
  }
});

export { _sfc_main as default };
