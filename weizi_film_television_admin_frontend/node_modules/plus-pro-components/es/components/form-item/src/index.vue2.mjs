import { defineComponent, ref, computed, watch, openBlock, createBlock, unref, mergeProps, createSlots, withCtx, renderSlot, renderList, resolveDynamicComponent, normalizeProps, guardReactiveProps, createElementBlock, Fragment, createTextVNode, toDisplayString, createElementVNode, createVNode, createCommentVNode } from 'vue';
import { getCustomProps, getFieldSlotName, getLabelSlotName, getTooltip } from '../../utils/index.mjs';
import { QuestionFilled } from '@element-plus/icons-vue';
import '../../../hooks/index.mjs';
import { PlusRadio } from '../../radio/index.mjs';
import { PlusDatePicker } from '../../date-picker/index.mjs';
import { PlusInputTag } from '../../input-tag/index.mjs';
import { PlusRender } from '../../render/index.mjs';
import { ElFormItem, ElTooltip, ElIcon, ElAutocomplete, ElCascader, ElCheckbox, ElCheckboxGroup, ElColorPicker, ElDatePicker, ElInputNumber, ElRadioGroup, ElRadio, ElRate, ElSelect, ElOption, ElSlider, ElSwitch, ElTimePicker, ElTimeSelect, ElInput } from 'element-plus';
import { useLocale } from '../../../hooks/useLocale.mjs';
import { useGetOptions } from '../../../hooks/useGetOptions.mjs';
import { isArray, isDate, isFunction } from '../../utils/is.mjs';

const _hoisted_1 = { class: "plus-form-item__label" };
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "PlusFormItem"
  },
  __name: "index",
  props: {
    modelValue: { type: null, required: false, default: "" },
    hasLabel: { type: null, required: false, default: true },
    label: { type: null, required: true },
    prop: { type: null, required: true },
    fieldProps: { type: null, required: false, default: () => ({}) },
    valueType: { type: null, required: false },
    options: { type: null, required: false, default: () => [] },
    formItemProps: { type: null, required: false, default: () => ({}) },
    renderField: { type: null, required: false },
    renderLabel: { type: null, required: false },
    tooltip: { type: null, required: false, default: "" },
    fieldSlots: { type: null, required: false, default: () => ({}) },
    index: { type: Number, required: false, default: 0 }
  },
  emits: ["update:modelValue", "change"],
  setup(__props, { expose: __expose, emit }) {
    const props = __props;
    const ElFormItem$1 = ElFormItem;
    const ElTooltip$1 = ElTooltip;
    const ElIcon$1 = ElIcon;
    const ElAutocomplete$1 = ElAutocomplete;
    const ElCascader$1 = ElCascader;
    const ElCheckbox$1 = ElCheckbox;
    const ElCheckboxGroup$1 = ElCheckboxGroup;
    const ElColorPicker$1 = ElColorPicker;
    const ElDatePicker$1 = ElDatePicker;
    const ElInputNumber$1 = ElInputNumber;
    const ElRadioGroup$1 = ElRadioGroup;
    const ElRadio$1 = ElRadio;
    const ElRate$1 = ElRate;
    const ElSelect$1 = ElSelect;
    const ElOption$1 = ElOption;
    const ElSlider$1 = ElSlider;
    const ElSwitch$1 = ElSwitch;
    const ElTimePicker$1 = ElTimePicker;
    const ElTimeSelect$1 = ElTimeSelect;
    const ElInput$1 = ElInput;
    const { t } = useLocale();
    const options = useGetOptions(props);
    const formItemInstance = ref();
    const fieldInstance = ref();
    const customFormItemProps = ref({});
    const customFieldProps = ref({});
    const state = ref();
    const range = ["datetimerange", "daterange", "monthrange"];
    const numberList = ["rate", "input-number", "slider"];
    const arrayList = ["checkbox", "plus-date-picker", "plus-input-tag"];
    const customFieldPropsIsReady = ref(false);
    const isArrayValue = computed(() => {
      var _a, _b, _c, _d;
      if (arrayList.includes(props.valueType)) {
        return true;
      }
      if (props.valueType === "select" && ((_a = customFieldProps.value) == null ? void 0 : _a.multiple) === true) {
        return true;
      }
      if (props.valueType === "date-picker" && range.includes((_b = customFieldProps.value) == null ? void 0 : _b.type)) {
        return true;
      }
      if (props.valueType === "time-picker" && ((_c = customFieldProps.value) == null ? void 0 : _c.isRange) === true) {
        return true;
      }
      if (props.valueType === "cascader" && ((_d = customFieldProps.value) == null ? void 0 : _d.multiple)) {
        return true;
      }
      return false;
    });
    const isNumberValue = computed(() => {
      if (numberList.includes(props.valueType)) {
        return true;
      }
      return false;
    });
    const setValue = (val) => {
      if (isArrayValue.value) {
        if (isArray(val)) {
          const [start, end] = val;
          if (isDate(start) || isDate(end)) {
            state.value = [String(start), String(end)];
          } else {
            state.value = val;
          }
        } else {
          state.value = [];
        }
      } else if (isNumberValue.value) {
        state.value = Number(val);
      } else if (props.valueType === "switch") {
        state.value = Boolean(val);
      } else if (isDate(val)) {
        state.value = String(val);
      } else {
        state.value = val;
      }
    };
    watch(
      () => props.formItemProps,
      (val) => {
        getCustomProps(val, state.value, props, props.index, "formItemProps").then((data) => {
          customFormItemProps.value = data;
        }).catch((err) => {
          throw err;
        });
      },
      {
        immediate: true,
        deep: true
      }
    );
    watch(
      () => props.fieldProps,
      (val) => {
        getCustomProps(val, state.value, props, props.index, "fieldProps").then((data) => {
          customFieldProps.value = data;
          customFieldPropsIsReady.value = true;
        }).catch((err) => {
          throw err;
        });
      },
      {
        immediate: true,
        deep: true
      }
    );
    watch(
      () => props.modelValue,
      (val) => {
        setValue(val);
      },
      {
        flush: "post",
        immediate: true
      }
    );
    const handleChange = (val) => {
      emit("update:modelValue", val);
      emit("change", val);
    };
    const handleSelect = ({ value }) => {
      handleChange(value);
    };
    __expose({
      formItemInstance,
      fieldInstance
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElFormItem$1), mergeProps({
        ref_key: "formItemInstance",
        ref: formItemInstance,
        label: _ctx.hasLabel ? _ctx.label : "",
        prop: _ctx.prop,
        class: "plus-form-item"
      }, customFormItemProps.value), createSlots({
        default: withCtx(() => [
          _ctx.renderField && unref(isFunction)(_ctx.renderField) ? (openBlock(), createBlock(unref(PlusRender), {
            key: 0,
            render: _ctx.renderField,
            params: props,
            "callback-value": state.value,
            "custom-field-props": customFieldProps.value,
            "render-type": "form",
            "handle-change": handleChange
          }, null, 8, ["render", "callback-value", "custom-field-props"])) : _ctx.$slots[unref(getFieldSlotName)(_ctx.prop)] ? renderSlot(_ctx.$slots, unref(getFieldSlotName)(_ctx.prop), {
            key: 1,
            prop: _ctx.prop,
            label: _ctx.label,
            fieldProps: customFieldProps.value,
            valueType: _ctx.valueType,
            column: props
          }) : _ctx.valueType === "autocomplete" ? (openBlock(), createBlock(unref(ElAutocomplete$1), mergeProps({
            key: 2,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => state.value = $event),
            placeholder: unref(t)("plus.field.pleaseEnter") + _ctx.label,
            class: "plus-form-item-field",
            clearable: ""
          }, customFieldProps.value, {
            onChange: handleChange,
            onSelect: handleSelect
          }), createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: withCtx((data) => [
                  (openBlock(), createBlock(
                    resolveDynamicComponent(fieldSlot),
                    normalizeProps(guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder"])) : _ctx.valueType === "cascader" ? (openBlock(), createBlock(unref(ElCascader$1), mergeProps({
            key: 3,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => state.value = $event),
            placeholder: unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field",
            options: unref(options),
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: withCtx((data) => [
                  (openBlock(), createBlock(
                    resolveDynamicComponent(fieldSlot),
                    normalizeProps(guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder", "options"])) : _ctx.valueType === "checkbox" ? (openBlock(), createBlock(unref(ElCheckboxGroup$1), mergeProps({
            key: 4,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => state.value = $event),
            placeholder: unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), createSlots({
            default: withCtx(() => [
              (openBlock(true), createElementBlock(
                Fragment,
                null,
                renderList(unref(options), (item) => {
                  return openBlock(), createBlock(unref(ElCheckbox$1), mergeProps({
                    key: item.label,
                    label: item.value
                  }, item.fieldItemProps), {
                    default: withCtx(() => [
                      createTextVNode(
                        toDisplayString(item.label),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1040, ["label"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            _: 2
            /* DYNAMIC */
          }, [
            renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: withCtx((data) => [
                  (openBlock(), createBlock(
                    resolveDynamicComponent(fieldSlot),
                    normalizeProps(guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder"])) : _ctx.valueType === "color-picker" ? (openBlock(), createBlock(unref(ElColorPicker$1), mergeProps({
            key: 5,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => state.value = $event),
            placeholder: unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "placeholder"])) : _ctx.valueType === "date-picker" ? (openBlock(), createBlock(unref(ElDatePicker$1), mergeProps({
            key: 6,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => state.value = $event),
            placeholder: unref(t)("plus.field.pleaseSelect") + _ctx.label,
            "start-placeholder": unref(t)("plus.datepicker.startPlaceholder"),
            "end-placeholder": unref(t)("plus.datepicker.endPlaceholder"),
            class: "plus-form-item-field",
            format: "YYYY-MM-DD HH:mm:ss",
            type: "datetime",
            "value-format": "YYYY-MM-DD HH:mm:ss",
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: withCtx((data) => [
                  (openBlock(), createBlock(
                    resolveDynamicComponent(fieldSlot),
                    normalizeProps(guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder", "start-placeholder", "end-placeholder"])) : _ctx.valueType === "plus-date-picker" ? (openBlock(), createBlock(unref(PlusDatePicker), mergeProps({
            key: 7,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => state.value = $event),
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue"])) : _ctx.valueType === "input-number" ? (openBlock(), createBlock(unref(ElInputNumber$1), mergeProps({
            key: 8,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => state.value = $event),
            class: "plus-form-item-field",
            placeholder: unref(t)("plus.field.pleaseEnter") + _ctx.label,
            autocomplete: "off"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "placeholder"])) : _ctx.valueType === "plus-input-tag" ? (openBlock(), createBlock(unref(PlusInputTag), mergeProps({
            key: 9,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => state.value = $event),
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue"])) : _ctx.valueType === "radio" ? (openBlock(), createBlock(unref(ElRadioGroup$1), mergeProps({
            key: 10,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => state.value = $event),
            placeholder: unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field",
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), createSlots({
            default: withCtx(() => [
              (openBlock(true), createElementBlock(
                Fragment,
                null,
                renderList(unref(options), (item) => {
                  return openBlock(), createBlock(unref(ElRadio$1), mergeProps({
                    key: item.label,
                    label: item.value
                  }, item.fieldItemProps), {
                    default: withCtx(() => [
                      createTextVNode(
                        toDisplayString(item.label),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1040, ["label"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            _: 2
            /* DYNAMIC */
          }, [
            renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: withCtx((data) => [
                  (openBlock(), createBlock(
                    resolveDynamicComponent(fieldSlot),
                    normalizeProps(guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder"])) : _ctx.valueType === "plus-radio" ? (openBlock(), createBlock(unref(PlusRadio), mergeProps({
            key: 11,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => state.value = $event),
            class: "plus-form-item-field",
            options: unref(options),
            "is-cancel": ""
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "options"])) : _ctx.valueType === "rate" ? (openBlock(), createBlock(unref(ElRate$1), mergeProps({
            key: 12,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => state.value = $event),
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue"])) : _ctx.valueType === "select" && customFieldPropsIsReady.value ? (openBlock(), createBlock(unref(ElSelect$1), mergeProps({
            key: 13,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => state.value = $event),
            placeholder: unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field",
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), createSlots({
            default: withCtx(() => [
              (openBlock(true), createElementBlock(
                Fragment,
                null,
                renderList(unref(options), (item) => {
                  return openBlock(), createBlock(unref(ElOption$1), mergeProps({
                    key: item.label,
                    label: item.label,
                    value: item.value
                  }, item.fieldItemProps), null, 16, ["label", "value"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            _: 2
            /* DYNAMIC */
          }, [
            renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: withCtx((data) => [
                  (openBlock(), createBlock(
                    resolveDynamicComponent(fieldSlot),
                    normalizeProps(guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder"])) : _ctx.valueType === "slider" ? (openBlock(), createBlock(unref(ElSlider$1), mergeProps({
            key: 14,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => state.value = $event),
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue"])) : _ctx.valueType === "switch" ? (openBlock(), createBlock(unref(ElSwitch$1), mergeProps({
            key: 15,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => state.value = $event),
            class: "plus-form-item-field"
          }, customFieldProps.value, { onChange: handleChange }), createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: withCtx((data) => [
                  (openBlock(), createBlock(
                    resolveDynamicComponent(fieldSlot),
                    normalizeProps(guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue"])) : _ctx.valueType === "time-picker" ? (openBlock(), createBlock(unref(ElTimePicker$1), mergeProps({
            key: 16,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => state.value = $event),
            placeholder: unref(t)("plus.field.pleaseSelect") + _ctx.label,
            class: "plus-form-item-field",
            clearable: "",
            "value-format": "YYYY-MM-DD HH:mm:ss"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "placeholder"])) : _ctx.valueType === "time-select" ? (openBlock(), createBlock(unref(ElTimeSelect$1), mergeProps({
            key: 17,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => state.value = $event),
            class: "plus-form-item-field",
            placeholder: unref(t)("plus.field.pleaseSelect") + _ctx.label,
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "placeholder"])) : _ctx.valueType === "textarea" ? (openBlock(), createBlock(unref(ElInput$1), mergeProps({
            key: 18,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => state.value = $event),
            type: "textarea",
            class: "plus-form-item-field",
            placeholder: unref(t)("plus.field.pleaseEnter") + _ctx.label,
            autocomplete: "off"
          }, customFieldProps.value, { onChange: handleChange }), null, 16, ["modelValue", "placeholder"])) : _ctx.valueType === "text" ? (openBlock(), createElementBlock(
            "span",
            mergeProps({
              key: 19,
              ref_key: "fieldInstance",
              ref: fieldInstance,
              class: "plus-form-item-field"
            }, customFieldProps.value),
            toDisplayString(state.value),
            17
            /* TEXT, FULL_PROPS */
          )) : (openBlock(), createBlock(unref(ElInput$1), mergeProps({
            key: 20,
            ref_key: "fieldInstance",
            ref: fieldInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => state.value = $event),
            class: "plus-form-item-field",
            placeholder: unref(t)("plus.field.pleaseEnter") + _ctx.label,
            autocomplete: "off",
            clearable: ""
          }, customFieldProps.value, { onChange: handleChange }), createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            renderList(_ctx.fieldSlots, (fieldSlot, key) => {
              return {
                name: key,
                fn: withCtx((data) => [
                  (openBlock(), createBlock(
                    resolveDynamicComponent(fieldSlot),
                    normalizeProps(guardReactiveProps(data)),
                    null,
                    16
                    /* FULL_PROPS */
                  ))
                ])
              };
            })
          ]), 1040, ["modelValue", "placeholder"]))
        ]),
        _: 2
        /* DYNAMIC */
      }, [
        _ctx.hasLabel ? {
          name: "label",
          fn: withCtx(({ label: currentLabel }) => [
            createElementVNode("span", _hoisted_1, [
              _ctx.renderLabel && unref(isFunction)(_ctx.renderLabel) ? (openBlock(), createBlock(unref(PlusRender), {
                key: 0,
                render: _ctx.renderLabel,
                params: props,
                "callback-value": currentLabel,
                "custom-field-props": customFieldProps.value
              }, null, 8, ["render", "callback-value", "custom-field-props"])) : renderSlot(_ctx.$slots, unref(getLabelSlotName)(_ctx.prop), {
                key: 1,
                prop: _ctx.prop,
                label: _ctx.label,
                fieldProps: customFieldProps.value,
                valueType: _ctx.valueType,
                column: props
              }, () => [
                createTextVNode(
                  toDisplayString(currentLabel),
                  1
                  /* TEXT */
                )
              ]),
              _ctx.tooltip ? (openBlock(), createBlock(
                unref(ElTooltip$1),
                mergeProps({
                  key: 2,
                  placement: "top"
                }, unref(getTooltip)(_ctx.tooltip)),
                {
                  default: withCtx(() => [
                    createVNode(unref(ElIcon$1), {
                      class: "plus-table-column__label__icon",
                      size: 16
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(QuestionFilled))
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                },
                16
                /* FULL_PROPS */
              )) : createCommentVNode("v-if", true)
            ])
          ]),
          key: "0"
        } : void 0
      ]), 1040, ["label", "prop"]);
    };
  }
});

export { _sfc_main as default };
