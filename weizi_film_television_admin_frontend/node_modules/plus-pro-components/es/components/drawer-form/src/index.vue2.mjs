import { defineComponent, ref, computed, useSlots, watch, openBlock, createBlock, unref, mergeProps, createSlots, withCtx, createVNode, renderSlot, renderList, normalizeProps, guardReactiveProps } from 'vue';
import { PlusForm } from '../../form/index.mjs';
import { ElDrawer } from 'element-plus';
import '../../../hooks/index.mjs';
import { filterSlots, getLabelSlotName, getFieldSlotName, getExtraSlotName } from '../../utils/index.mjs';
import { useLocale } from '../../../hooks/useLocale.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "PlusDrawerForm"
  },
  __name: "index",
  props: {
    modelValue: { type: null, required: false, default: () => ({}) },
    visible: { type: Boolean, required: false, default: false },
    drawer: { type: null, required: false, default: () => ({}) },
    size: { type: [String, Number], required: false, default: "540px" },
    form: { type: null, required: false, default: () => ({}) }
  },
  emits: ["update:modelValue", "update:visible", "submit", "change", "cancel", "reset"],
  setup(__props, { expose: __expose, emit }) {
    const props = __props;
    const { t } = useLocale();
    const formInstance = ref();
    const computedFormInstance = computed(() => {
      var _a;
      return (_a = formInstance.value) == null ? void 0 : _a.formInstance;
    });
    const drawerInstance = ref();
    const state = ref({});
    const subVisible = ref(false);
    const slots = useSlots();
    const labelSlots = filterSlots(slots, getLabelSlotName());
    const fieldSlots = filterSlots(slots, getFieldSlotName());
    const extraSlots = filterSlots(slots, getExtraSlotName());
    watch(
      () => props.visible,
      (val) => {
        subVisible.value = val;
      },
      {
        immediate: true
      }
    );
    watch(
      () => props.modelValue,
      (val) => {
        state.value = val;
      },
      {
        immediate: true
      }
    );
    const handleChange = (values, column) => {
      emit("update:modelValue", values);
      emit("change", values, column);
    };
    const handleSubmitForm = () => {
      emit("submit", state.value);
    };
    const handleCancel = () => {
      subVisible.value = false;
      emit("update:visible", subVisible.value);
      emit("cancel");
    };
    const handleReset = () => {
      emit("reset");
    };
    __expose({
      drawerInstance,
      formInstance: computedFormInstance
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElDrawer), mergeProps({
        ref_key: "drawerInstance",
        ref: drawerInstance,
        modelValue: subVisible.value,
        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => subVisible.value = $event),
        size: _ctx.size || "540px",
        title: unref(t)("plus.drawerForm.title"),
        "close-on-click-modal": false,
        "close-on-press-escape": false
      }, _ctx.drawer, { onClose: handleCancel }), createSlots({
        default: withCtx(() => [
          createVNode(unref(PlusForm), mergeProps({
            ref_key: "formInstance",
            ref: formInstance,
            modelValue: state.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => state.value = $event),
            "footer-align": "right"
          }, _ctx.form, {
            onSubmit: handleSubmitForm,
            onChange: handleChange,
            onReset: handleReset
          }), createSlots({
            _: 2
            /* DYNAMIC */
          }, [
            _ctx.$slots["form-footer"] ? {
              name: "footer",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "form-footer")
              ]),
              key: "0"
            } : void 0,
            _ctx.$slots["form-group-header"] ? {
              name: "group-header",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "form-group-header")
              ]),
              key: "1"
            } : void 0,
            renderList(unref(labelSlots), (_, key) => {
              return {
                name: key,
                fn: withCtx((data) => [
                  renderSlot(_ctx.$slots, key, normalizeProps(guardReactiveProps(data)))
                ])
              };
            }),
            renderList(unref(fieldSlots), (_, key) => {
              return {
                name: key,
                fn: withCtx((data) => [
                  renderSlot(_ctx.$slots, key, normalizeProps(guardReactiveProps(data)))
                ])
              };
            }),
            renderList(unref(extraSlots), (_, key) => {
              return {
                name: key,
                fn: withCtx((data) => [
                  renderSlot(_ctx.$slots, key, normalizeProps(guardReactiveProps(data)))
                ])
              };
            })
          ]), 1040, ["modelValue"])
        ]),
        _: 2
        /* DYNAMIC */
      }, [
        _ctx.$slots["drawer-header"] ? {
          name: "header",
          fn: withCtx(() => [
            renderSlot(_ctx.$slots, "drawer-header")
          ]),
          key: "0"
        } : void 0,
        _ctx.$slots["drawer-footer"] ? {
          name: "footer",
          fn: withCtx(() => [
            renderSlot(_ctx.$slots, "drawer-footer")
          ]),
          key: "1"
        } : void 0
      ]), 1040, ["modelValue", "size", "title"]);
    };
  }
});

export { _sfc_main as default };
