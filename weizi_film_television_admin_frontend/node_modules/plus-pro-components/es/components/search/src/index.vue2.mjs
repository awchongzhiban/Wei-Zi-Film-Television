import { defineComponent, ref, reactive, useSlots, computed, unref, watch, toRefs, openBlock, createBlock, mergeProps, createSlots, withCtx, renderSlot, createTextVNode, toDisplayString, createCommentVNode, createVNode, renderList, normalizeProps, guardReactiveProps } from 'vue';
import { PlusForm } from '../../form/index.mjs';
import { RefreshRight, Search, ArrowUp, ArrowDown } from '@element-plus/icons-vue';
import { cloneDeep } from 'lodash-es';
import '../../../hooks/index.mjs';
import { ElFormItem, ElButton, ElIcon } from 'element-plus';
import { filterSlots, getLabelSlotName, getFieldSlotName, getExtraSlotName } from '../../utils/index.mjs';
import { useLocale } from '../../../hooks/useLocale.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "PlusSearch"
  },
  __name: "index",
  props: {
    modelValue: { type: null, required: false, default: () => ({}) },
    defaultValues: { type: null, required: false, default: () => ({}) },
    columns: { type: Array, required: false, default: () => [] },
    hasFooter: { type: Boolean, required: false, default: true },
    hasReset: { type: Boolean, required: false, default: true },
    hasUnfold: { type: Boolean, required: false, default: true },
    searchText: { type: String, required: false, default: "" },
    resetText: { type: String, required: false, default: "" },
    searchLoading: { type: Boolean, required: false, default: false },
    inline: { type: Boolean, required: false, default: true },
    showNumber: { type: Number, required: false, default: 2 },
    rowProps: { type: Object, required: false, default: () => ({
      gutter: 20
    }) },
    colProps: { type: Object, required: false, default: () => ({
      xs: 24,
      sm: 12,
      md: 8,
      lg: 8,
      xl: 6
    }) }
  },
  emits: ["update:modelValue", "search", "change", "reset"],
  setup(__props, { expose: __expose, emit }) {
    const props = __props;
    const { t } = useLocale();
    const plusFormInstance = ref();
    const state = reactive({
      values: {},
      subColumns: [],
      originData: [],
      isShowUnfold: false
    });
    const slots = useSlots();
    const labelSlots = filterSlots(slots, getLabelSlotName());
    const fieldSlots = filterSlots(slots, getFieldSlotName());
    const extraSlots = filterSlots(slots, getExtraSlotName());
    state.originData = computed(() => {
      return props.columns.filter((item) => unref(item.hideInSearch) !== true).map((item) => ({ ...item, hideInForm: false }));
    });
    state.subColumns = computed(() => {
      const data = cloneDeep(state.originData);
      if (props.hasUnfold && !state.isShowUnfold) {
        return data.slice(0, props.showNumber);
      } else {
        return data;
      }
    });
    watch(
      () => props.modelValue,
      (val) => {
        state.values = val;
      },
      {
        immediate: true
      }
    );
    const handleChange = async (values, column) => {
      emit("change", values, column);
      emit("update:modelValue", values);
    };
    const handleSearch = async () => {
      emit("search", state.values);
    };
    const handleReset = () => {
      state.values = { ...props.defaultValues };
      emit("reset", state.values);
    };
    const handleUnfold = () => {
      state.isShowUnfold = !state.isShowUnfold;
    };
    __expose({
      plusFormInstance,
      handleReset,
      handleSearch,
      handleUnfold
    });
    const { isShowUnfold, subColumns } = toRefs(state);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(PlusForm), mergeProps({
        ref_key: "plusFormInstance",
        ref: plusFormInstance
      }, _ctx.$attrs, {
        modelValue: state.values,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => state.values = $event),
        inline: _ctx.inline,
        "row-props": _ctx.rowProps,
        "col-props": _ctx.colProps,
        columns: unref(subColumns),
        class: "plus-search",
        "has-footer": false,
        onChange: handleChange
      }), createSlots({
        "search-footer": withCtx(() => [
          renderSlot(_ctx.$slots, "footer", {
            isShowUnfold: unref(isShowUnfold),
            handleReset,
            handleSearch,
            handleUnfold
          }, () => [
            _ctx.hasFooter ? (openBlock(), createBlock(unref(ElFormItem), {
              key: 0,
              class: "plus-search__button__wrapper"
            }, {
              default: withCtx(() => [
                _ctx.hasReset ? (openBlock(), createBlock(unref(ElButton), {
                  key: 0,
                  icon: unref(RefreshRight),
                  onClick: handleReset
                }, {
                  default: withCtx(() => [
                    createTextVNode(
                      toDisplayString(_ctx.resetText || unref(t)("plus.search.resetText")),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["icon"])) : createCommentVNode("v-if", true),
                createVNode(unref(ElButton), {
                  type: "primary",
                  loading: _ctx.searchLoading,
                  icon: unref(Search),
                  onClick: handleSearch
                }, {
                  default: withCtx(() => [
                    createTextVNode(
                      toDisplayString(_ctx.searchText || unref(t)("plus.search.searchText")),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["loading", "icon"]),
                _ctx.hasUnfold && state.originData.length > _ctx.showNumber ? (openBlock(), createBlock(unref(ElButton), {
                  key: 1,
                  type: "primary",
                  link: "",
                  onClick: handleUnfold
                }, {
                  default: withCtx(() => [
                    createTextVNode(
                      toDisplayString(unref(isShowUnfold) ? unref(t)("plus.search.retract") : unref(t)("plus.search.expand")) + " ",
                      1
                      /* TEXT */
                    ),
                    createVNode(unref(ElIcon), null, {
                      default: withCtx(() => [
                        unref(isShowUnfold) ? (openBlock(), createBlock(unref(ArrowUp), { key: 0 })) : (openBlock(), createBlock(unref(ArrowDown), { key: 1 }))
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                })) : createCommentVNode("v-if", true)
              ]),
              _: 1
              /* STABLE */
            })) : createCommentVNode("v-if", true)
          ])
        ]),
        _: 2
        /* DYNAMIC */
      }, [
        renderList(unref(labelSlots), (_, key) => {
          return {
            name: key,
            fn: withCtx((data) => [
              renderSlot(_ctx.$slots, key, normalizeProps(guardReactiveProps(data)))
            ])
          };
        }),
        renderList(unref(fieldSlots), (_, key) => {
          return {
            name: key,
            fn: withCtx((data) => [
              renderSlot(_ctx.$slots, key, normalizeProps(guardReactiveProps(data)))
            ])
          };
        }),
        renderList(unref(extraSlots), (_, key) => {
          return {
            name: key,
            fn: withCtx((data) => [
              renderSlot(_ctx.$slots, key, normalizeProps(guardReactiveProps(data)))
            ])
          };
        })
      ]), 1040, ["modelValue", "inline", "row-props", "col-props", "columns"]);
    };
  }
});

export { _sfc_main as default };
