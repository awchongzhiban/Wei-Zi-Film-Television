import { get, set } from 'lodash-es';
import { isRef } from 'vue';
import { isString, isPlainObject, toRawType, isFunction, isPromise, isEmptyObject } from './is.mjs';
export { isArray, isBoolean, isDate, isMap, isObject, isRegExp, isSet, isSymbol, isUrl, objectToString, toTypeString } from './is.mjs';
export { formatDate, formatMoney } from './format.mjs';

const getTableKey = (item, hasEditable = false) => hasEditable ? item.label + item.prop + item.editable : item.label + item.prop;
const getTooltip = (tooltip) => {
  if (isString(tooltip)) {
    return { content: tooltip };
  }
  if (isPlainObject(tooltip)) {
    return tooltip;
  }
};
const throwError = (data, type) => {
  if (!isPlainObject(data)) {
    throw new Error(`${type} expected Object but got ${toRawType(data)}`);
  }
};
const getCustomProps = async (props, value, row, index, type) => {
  try {
    let data = {};
    const params = { row, index };
    if (!props) {
      data = {};
    } else if (isRef(props)) {
      data = props.value;
    } else if (isPlainObject(props)) {
      data = { ...props };
    } else if (isFunction(props)) {
      data = await props(value, params);
    } else if (isPromise(props)) {
      data = await props;
    } else {
      data = props;
    }
    throwError(data, type);
    return data;
  } catch (error) {
    return Promise.reject(error);
  }
};
const handleSlots = (slots, value, params) => {
  if (!slots || !isPlainObject(slots) || isEmptyObject(slots)) {
    return {};
  }
  const slotsRes = {};
  if (slots && !isEmptyObject(slots)) {
    Object.keys(slots).forEach((key) => {
      const temp = (...arg) => {
        return () => slots[key](...arg);
      };
      slotsRes[key] = temp(value, params);
    });
  }
  return slotsRes;
};
const getSlotName = (type, prop) => {
  return prop ? `plus-${type}-${prop}` : `plus-${type}`;
};
const getFieldSlotName = (prop) => {
  return `${getSlotName("field", prop)}`;
};
const getLabelSlotName = (prop) => {
  return `${getSlotName("label", prop)}`;
};
const getExtraSlotName = (prop) => {
  return `${getSlotName("extra", prop)}`;
};
const getTableHeaderSlotName = (prop) => {
  return `${getSlotName("header", prop)}`;
};
const getTableCellSlotName = (prop) => {
  return `${getSlotName("cell", prop)}`;
};
const getDescSlotName = (prop) => {
  return `${getSlotName("desc", prop)}`;
};
const getDescLabelSlotName = (prop) => {
  return `${getSlotName("desc-label", prop)}`;
};
const filterSlots = (slots, name) => {
  const data = {};
  Object.keys(slots || {}).forEach((key) => {
    if (key.startsWith(name)) {
      data[key] = slots[key];
    }
  });
  return data;
};
const getValue = (target, key) => {
  return get(target, key);
};
const setValue = (target, key, value) => {
  return set(target, key, value);
};

export { filterSlots, getCustomProps, getDescLabelSlotName, getDescSlotName, getExtraSlotName, getFieldSlotName, getLabelSlotName, getSlotName, getTableCellSlotName, getTableHeaderSlotName, getTableKey, getTooltip, getValue, handleSlots, isEmptyObject, isFunction, isPlainObject, isPromise, isString, setValue, toRawType };
