import type { PlusColumn, PageInfo, RecordType, Mutable, FieldValues } from 'plus-pro-components/es/types';
import type { PlusSearchProps } from 'plus-pro-components/es/components/search';
import type { PlusTableProps } from 'plus-pro-components/es/components/table';
import type { Ref } from 'vue';
import type { CardProps } from 'element-plus';
export interface PlusPageProps {
    /**
     * 配置
     */
    columns: PlusColumn[];
    /**
     *
     * params参数中一定会有 pageSize 和  page ，这两个参数是 plus-pro-components 的规范
     * @param params
     */
    request: (params: PageInfo & {
        [index: string]: any;
    }) => Promise<{
        /** 数据 */
        data: any;
        /** 不传会使用 data 的长度，如果是分页一定要传*/
        total: number;
    }>;
    /**
     * PlusSearchProps
     */
    search?: false | Partial<PlusSearchProps>;
    /**
     * PlusTableProps
     */
    table?: Partial<PlusTableProps>;
    /**
     * request的 params 其他参数，默认会带pageSize，page和 PlusSearch组件中的值
     */
    params?: RecordType;
    /**
     * 对通过 request 获取的数据进行处理
     * @param data
     */
    postData?: <T = any>(data: T[]) => T[];
    /**
     * 搜索之前进行一些修改
     * @param params
     */
    beforeSearchSubmit?: <T = any>(params: T) => T;
    /**
     *  表格和搜索是否需要el-card 包裹 默认true
     */
    isCard?: boolean;
    /**
     * 搜索外层的el-card的props ，当isCard为true时生效
     */
    searchCardProps?: Partial<Mutable<CardProps>>;
    /**
     *   表格外层的el-card的props ，当isCard为true时生效
     */
    tableCardProps?: Partial<Mutable<CardProps>>;
    defaultPageInfo?: PageInfo;
    defaultPageSizeList?: number[];
    pagination?: RecordType;
}
export interface PlusPageEmits {
    /**
     * 数据加载失败时触发
     */
    (e: 'requestError', error: any): void;
    (e: 'search', data: FieldValues): void;
    (e: 'reset', data: FieldValues): void;
    (e: 'paginationChange', pageInfo: PageInfo): void;
}
export interface PlusPageState {
    params: FieldValues;
    values: FieldValues;
}
declare const _default: import("vue").DefineComponent<{
    columns: {
        type: ArrayConstructor;
        required: true;
        default: () => never[];
    };
    request: {
        type: FunctionConstructor;
        required: true;
    };
    search: {
        type: (ObjectConstructor | BooleanConstructor)[];
        required: false;
        default: () => {};
    };
    table: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    params: {
        type: null;
        required: false;
        default: () => {};
    };
    postData: {
        type: FunctionConstructor;
        required: false;
        default: undefined;
    };
    beforeSearchSubmit: {
        type: FunctionConstructor;
        required: false;
        default: undefined;
    };
    isCard: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    searchCardProps: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    tableCardProps: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    defaultPageInfo: {
        type: null;
        required: false;
        default: () => {
            page: number;
            pageSize: number;
        };
    };
    defaultPageSizeList: {
        type: ArrayConstructor;
        required: false;
        default: () => number[];
    };
    pagination: {
        type: null;
        required: false;
        default: () => {};
    };
}, {
    props: any;
    emit: (event: "reset" | "search" | "requestError" | "paginationChange", ...args: any[]) => void;
    PlusSearch: import("vue").ComponentOptions<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, any, any, any, any> | {
        new (...args: any[]): any;
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
    };
    PlusTable: import("vue").ComponentOptions<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, any, any, any, any> | {
        new (...args: any[]): any;
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
    };
    computedDefaultPageInfo: import("vue").ComputedRef<any>;
    computedDefaultPageSizeList: import("vue").ComputedRef<any>;
    tableData: Ref<any>;
    pageInfo: Ref<{
        page: number;
        pageSize: number;
    }>;
    total: Ref<number>;
    loadingStatus: Ref<boolean>;
    plusSearchInstance: Ref<any>;
    plusTableInstance: Ref<any>;
    state: PlusPageState;
    slots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    cellSlots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    headerSlots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    fieldSlots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    renderWrapper: () => {
        search: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        table: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
    };
    getList: () => Promise<void>;
    handlePaginationChange: (_pageInfo: PageInfo) => void;
    handleSearch: (values: any) => void;
    handleRest: (values: any) => void;
    handleRefresh: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("reset" | "search" | "requestError" | "paginationChange")[], "reset" | "search" | "requestError" | "paginationChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    columns: {
        type: ArrayConstructor;
        required: true;
        default: () => never[];
    };
    request: {
        type: FunctionConstructor;
        required: true;
    };
    search: {
        type: (ObjectConstructor | BooleanConstructor)[];
        required: false;
        default: () => {};
    };
    table: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    params: {
        type: null;
        required: false;
        default: () => {};
    };
    postData: {
        type: FunctionConstructor;
        required: false;
        default: undefined;
    };
    beforeSearchSubmit: {
        type: FunctionConstructor;
        required: false;
        default: undefined;
    };
    isCard: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    searchCardProps: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    tableCardProps: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    defaultPageInfo: {
        type: null;
        required: false;
        default: () => {
            page: number;
            pageSize: number;
        };
    };
    defaultPageSizeList: {
        type: ArrayConstructor;
        required: false;
        default: () => number[];
    };
    pagination: {
        type: null;
        required: false;
        default: () => {};
    };
}>> & {
    onReset?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
    onRequestError?: ((...args: any[]) => any) | undefined;
    onPaginationChange?: ((...args: any[]) => any) | undefined;
}, {
    search: boolean | Record<string, any>;
    columns: unknown[];
    params: any;
    table: Record<string, any>;
    postData: Function;
    beforeSearchSubmit: Function;
    isCard: boolean;
    searchCardProps: Record<string, any>;
    tableCardProps: Record<string, any>;
    defaultPageInfo: any;
    defaultPageSizeList: unknown[];
    pagination: any;
}, {}>;
export default _default;
