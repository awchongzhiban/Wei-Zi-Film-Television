import { ref, isRef, watch } from 'vue';
import '../components/utils/index.mjs';
import { isArray, toRawType, isFunction, isPromise } from '../components/utils/is.mjs';

const throwError = (data) => {
  if (!isArray(data)) {
    console.error("Uncaught TypeError: ", `options expected Array but got ${toRawType(data)}`);
  }
};
const useGetOptions = (props) => {
  const options = ref([]);
  if (!props.options) {
    options.value = [];
  } else if (isRef(props.options)) {
    watch(
      props.options,
      (val) => {
        options.value = val;
      },
      {
        immediate: true
      }
    );
  } else if (isArray(props.options)) {
    options.value = [...props.options];
  } else if (isFunction(props.options)) {
    const getValue = props.options;
    const result = getValue(props);
    if (isPromise(result)) {
      ;
      result.then((res) => {
        options.value = res;
        throwError(options.value);
      }).catch((err) => {
        throw err;
      });
    } else {
      options.value = result;
    }
  } else if (isPromise(props.options)) {
    const getValue = props.options;
    getValue.then((res) => {
      options.value = res;
      throwError(options.value);
    }).catch((err) => {
      throw err;
    });
  } else {
    throwError(props.options);
  }
  return options;
};

export { useGetOptions };
