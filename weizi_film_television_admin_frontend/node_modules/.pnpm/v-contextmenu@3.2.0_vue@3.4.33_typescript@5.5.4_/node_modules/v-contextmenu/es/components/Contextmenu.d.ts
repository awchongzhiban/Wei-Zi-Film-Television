import type { PropType } from 'vue';
import type { TriggerEventType, ShowOptions, AddReferenceOptions } from '../types';
declare const Contextmenu: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoAdjustPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: PropType<string | Element>;
        default: () => string;
    };
    preventContextmenu: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    visible: import("vue").Ref<boolean>;
    style: import("vue").ComputedRef<{
        top: string;
        left: string;
    }>;
    currentReferenceOptions: import("vue").ComputedRef<{
        triggers: TriggerEventType[];
        handler: (evt: Event) => void;
    } | undefined>;
    currentOptions: import("vue").Ref<null>;
    contextmenuRef: import("vue").Ref<HTMLDivElement | null>;
    addReference: (el: Element, options?: AddReferenceOptions) => void;
    removeReference: (el: Element) => void;
    toggle: (value: boolean) => void;
    show: (evt: MouseEvent | ShowOptions, options?: ShowOptions) => void;
    hide: () => void;
}, unknown, {}, {
    renderContent(): import("vue/jsx-runtime").JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("contextmenu" | "show" | "hide" | "update:modelValue")[], "contextmenu" | "show" | "hide" | "update:modelValue", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoAdjustPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: PropType<string | Element>;
        default: () => string;
    };
    preventContextmenu: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onContextmenu?: ((...args: any[]) => any) | undefined;
    onShow?: ((...args: any[]) => any) | undefined;
    onHide?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: boolean;
    autoAdjustPlacement: boolean;
    disabled: boolean;
    teleport: string | Element;
    preventContextmenu: boolean;
}, {}>;
export default Contextmenu;
