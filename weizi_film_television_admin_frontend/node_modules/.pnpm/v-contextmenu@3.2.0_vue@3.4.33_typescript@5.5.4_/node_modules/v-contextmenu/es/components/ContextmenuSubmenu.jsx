import { ref, computed, defineComponent, 
// Transition,
inject, nextTick, } from 'vue';
import ContextmenuIcon from './ContextmenuIcon';
import { CLASSES } from '../constants';
var ContextmenuSubmenu = defineComponent({
    name: 'VContextmenuSubmenu',
    props: {
        title: {
            type: String,
            required: true,
        },
        disabled: {
            type: Boolean,
            default: false,
        },
    },
    emits: ['mouseenter', 'mouseleave'],
    setup: function (props, _a) {
        var emit = _a.emit;
        var submenuRef = ref(null);
        var autoAdjustPlacement = inject('autoAdjustPlacement');
        var placements = ref(['top', 'right']);
        var hover = ref(false);
        var handleMouseenter = function (evt) {
            if (props.disabled)
                return;
            hover.value = true;
            emit('mouseenter', evt);
            nextTick(function () {
                var targetPlacements = [];
                if (autoAdjustPlacement) {
                    var target = evt.target;
                    var targetDimension = target.getBoundingClientRect();
                    if (!submenuRef.value)
                        return;
                    var submenuWidth = submenuRef.value.clientWidth;
                    var submenuHeight = submenuRef.value.clientHeight;
                    if (targetDimension.right + submenuWidth >= window.innerWidth) {
                        targetPlacements.push('left');
                    }
                    else {
                        targetPlacements.push('right');
                    }
                    if (targetDimension.bottom + submenuHeight >= window.innerHeight) {
                        targetPlacements.push('bottom');
                    }
                    else {
                        targetPlacements.push('top');
                    }
                }
                placements.value = targetPlacements;
            });
        };
        var handleMouseleave = function (evt) {
            if (props.disabled)
                return;
            hover.value = false;
            emit('mouseleave', evt);
        };
        var titleClasses = computed(function () {
            var _a;
            return (_a = {},
                _a[CLASSES.contextmenuItem] = true,
                _a[CLASSES.contextmenuSubmenuTitle] = true,
                _a[CLASSES.contextmenuItemHover] = hover.value,
                _a[CLASSES.contextmenuItemDisabled] = props.disabled,
                _a);
        });
        var menusClasses = computed(function () {
            var _a;
            return (_a = {},
                _a[CLASSES.contextmenu] = true,
                _a[CLASSES.contextmenuSubmenuMenus] = true,
                _a[CLASSES.contextmenuSubmenuMenusTop] = placements.value.includes('top'),
                _a[CLASSES.contextmenuSubmenuMenusRight] = placements.value.includes('right'),
                _a[CLASSES.contextmenuSubmenuMenusBottom] = placements.value.includes('bottom'),
                _a[CLASSES.contextmenuSubmenuMenusLeft] = placements.value.includes('left'),
                _a);
        });
        return {
            hover: hover,
            submenuRef: submenuRef,
            titleClasses: titleClasses,
            menusClasses: menusClasses,
            handleMouseenter: handleMouseenter,
            handleMouseleave: handleMouseleave,
        };
    },
    render: function () {
        var _a, _b, _c, _d;
        return (<li class={CLASSES.contextmenuSubmenu} onMouseenter={this.handleMouseenter} onMouseleave={this.handleMouseleave}>
        <div class={this.titleClasses}>
          {((_b = (_a = this.$slots).title) === null || _b === void 0 ? void 0 : _b.call(_a)) || this.title}

          <span class={CLASSES.contextmenuSubmenuArrow}>
            <ContextmenuIcon name="right-arrow"/>
          </span>
        </div>

        {/* <Transition name={CLASSES.contextmenu}> */}
        {this.hover ? (<div ref="submenuRef" class={this.menusClasses}>
            <ul class={CLASSES.contextmenuInner}>{(_d = (_c = this.$slots).default) === null || _d === void 0 ? void 0 : _d.call(_c)}</ul>
          </div>) : null}
        {/* </Transition> */}
      </li>);
    },
});
export default ContextmenuSubmenu;
//# sourceMappingURL=ContextmenuSubmenu.jsx.map