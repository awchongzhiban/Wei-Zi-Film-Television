import type { PropType } from "vue";
import type { Language, DefaultLanguage } from "../../types";
declare const _default: {
    data: {
        type: PropType<any[]>;
        default: () => never[];
    };
    size: {
        readonly type: PropType<import("element-plus/es/utils/index.mjs").EpPropMergeType<StringConstructor, "" | "large" | "default" | "small", never>>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
        __epPropKey: true;
    };
    width: (NumberConstructor | StringConstructor)[];
    height: (NumberConstructor | StringConstructor)[];
    maxHeight: (NumberConstructor | StringConstructor)[];
    fit: {
        type: BooleanConstructor;
        default: boolean;
    };
    stripe: BooleanConstructor;
    border: BooleanConstructor;
    rowKey: PropType<string | ((row: any) => string)>;
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSummary: BooleanConstructor;
    sumText: StringConstructor;
    summaryMethod: PropType<import("element-plus/es/components/table/src/table/defaults.mjs").SummaryMethod<any>>;
    rowClassName: PropType<import("element-plus/es/components/table/src/table/defaults.mjs").ColumnCls<any>>;
    rowStyle: PropType<import("element-plus/es/components/table/src/table/defaults.mjs").ColumnStyle<any>>;
    cellClassName: PropType<import("element-plus/es/components/table/src/table/defaults.mjs").CellCls<any>>;
    cellStyle: PropType<import("element-plus/es/components/table/src/table/defaults.mjs").CellStyle<any>>;
    headerRowClassName: PropType<import("element-plus/es/components/table/src/table/defaults.mjs").ColumnCls<any>>;
    headerRowStyle: PropType<import("element-plus/es/components/table/src/table/defaults.mjs").ColumnStyle<any>>;
    headerCellClassName: PropType<import("element-plus/es/components/table/src/table/defaults.mjs").CellCls<any>>;
    headerCellStyle: PropType<import("element-plus/es/components/table/src/table/defaults.mjs").CellStyle<any>>;
    highlightCurrentRow: BooleanConstructor;
    currentRowKey: (NumberConstructor | StringConstructor)[];
    emptyText: StringConstructor;
    expandRowKeys: PropType<any[]>;
    defaultExpandAll: BooleanConstructor;
    defaultSort: PropType<import("element-plus/es/components/table/src/table/defaults.mjs").Sort>;
    tooltipEffect: StringConstructor;
    tooltipOptions: PropType<Partial<Pick<import("element-plus").ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">>>;
    spanMethod: PropType<(data: {
        row: any;
        rowIndex: number;
        column: import("element-plus/es/components/table/src/table-column/defaults.mjs").TableColumnCtx<any>;
        columnIndex: number;
    }) => number[] | {
        rowspan: number;
        colspan: number;
    }>;
    selectOnIndeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indent: {
        type: NumberConstructor;
        default: number;
    };
    treeProps: {
        type: PropType<{
            hasChildren?: string;
            children?: string;
        }>;
        default: () => {
            hasChildren: string;
            children: string;
        };
    };
    lazy: BooleanConstructor;
    load: PropType<(row: any, treeNode: import("element-plus/es/components/table/src/table/defaults.mjs").TreeNode, resolve: (data: any[]) => void) => void>;
    style: {
        type: PropType<import("vue").CSSProperties>;
        default: () => {};
    };
    className: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: PropType<"fixed" | "auto">;
        default: string;
    };
    scrollbarAlwaysOn: BooleanConstructor;
    flexible: BooleanConstructor;
    showOverflowTooltip: PropType<boolean | Partial<Pick<import("element-plus").ElTooltipProps, "showArrow" | "appendTo" | "transition" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">>>;
    tableKey: {
        type: PropType<string | number>;
        default: string;
    };
    columns: {
        type: ArrayConstructor;
        default: any[];
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingConfig: {
        type: ObjectConstructor;
        default: () => void;
    };
    alignWhole: {
        type: StringConstructor;
        default: string;
    };
    headerAlign: {
        type: StringConstructor;
        default: string;
    };
    rowHoverBgColor: {
        type: StringConstructor;
        default: string;
    };
    pagination: {
        type: ObjectConstructor;
        default: {
            total: number;
            pageSize: number;
            align: string;
            background: boolean;
            pageSizes: number[];
            layout: string;
        };
    };
    paginationSmall: {
        type: BooleanConstructor;
        default: boolean;
    };
    adaptive: {
        type: BooleanConstructor;
        default: boolean;
    };
    adaptiveConfig: {
        type: ObjectConstructor;
        default: {
            offsetBottom: number;
            fixHeader: boolean;
            timeout: number;
            zIndex: number;
        };
    };
    locale: {
        type: PropType<DefaultLanguage | Language>;
        default: string;
    };
};
export default _default;
